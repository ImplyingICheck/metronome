"""
This type stub file was generated by pyright.
"""

import _tkinter
import sys
from _typeshed import Incomplete, StrEnum, StrOrBytesPath
from collections.abc import Callable, Mapping, Sequence
from tkinter.constants import *
from tkinter.font import _FontDescription
from types import TracebackType
from typing import Any, Generic, Literal, NamedTuple, TypeVar, TypedDict, overload, type_check_only
from typing_extensions import TypeAlias, TypeVarTuple, Unpack, deprecated

if sys.version_info >= (3, 9):
    ...
TclError = _tkinter.TclError
wantobjects: int
TkVersion: float
TclVersion: float
READABLE = ...
WRITABLE = ...
EXCEPTION = ...
_Anchor: TypeAlias = ...
_ButtonCommand: TypeAlias = ...
_Compound: TypeAlias = ...
_Cursor: TypeAlias = ...
_EntryValidateCommand: TypeAlias = ...
_ImageSpec: TypeAlias = ...
_Relief: TypeAlias = ...
_ScreenUnits: TypeAlias = ...
_XYScrollCommand: TypeAlias = ...
_TakeFocusValue: TypeAlias = ...
if sys.version_info >= (3, 11):
    class _VersionInfoType(NamedTuple):
        major: int
        minor: int
        micro: int
        releaselevel: str
        serial: int
        ...
    
    
class EventType(StrEnum):
    Activate: str
    ButtonPress: str
    Button = ...
    ButtonRelease: str
    Circulate: str
    CirculateRequest: str
    ClientMessage: str
    Colormap: str
    Configure: str
    ConfigureRequest: str
    Create: str
    Deactivate: str
    Destroy: str
    Enter: str
    Expose: str
    FocusIn: str
    FocusOut: str
    GraphicsExpose: str
    Gravity: str
    KeyPress: str
    Key = ...
    KeyRelease: str
    Keymap: str
    Leave: str
    Map: str
    MapRequest: str
    Mapping: str
    Motion: str
    MouseWheel: str
    NoExpose: str
    Property: str
    Reparent: str
    ResizeRequest: str
    Selection: str
    SelectionClear: str
    SelectionRequest: str
    Unmap: str
    VirtualEvent: str
    Visibility: str


_W = TypeVar("_W", bound=Misc)
_W_co = TypeVar("_W_co", covariant=True, bound=Misc)
class Event(Generic[_W_co]):
    serial: int
    num: int
    focus: bool
    height: int
    width: int
    keycode: int
    state: int | str
    time: int
    x: int
    y: int
    x_root: int
    y_root: int
    char: str
    send_event: bool
    keysym: str
    keysym_num: int
    type: EventType
    widget: _W_co
    delta: int
    ...


def NoDefaultRoot() -> None:
    ...

class Variable:
    def __init__(self, master: Misc | None = ..., value: Incomplete | None = ..., name: str | None = ...) -> None:
        ...
    
    def set(self, value) -> None:
        ...
    
    initialize = ...
    def get(self):
        ...
    
    def trace_add(self, mode: Literal["array", "read", "write", "unset"], callback: Callable[[str, str, str], object]) -> str:
        ...
    
    def trace_remove(self, mode: Literal["array", "read", "write", "unset"], cbname: str) -> None:
        ...
    
    def trace_info(self) -> list[tuple[tuple[Literal["array", "read", "write", "unset"], ...], str]]:
        ...
    
    @deprecated("use trace_add() instead of trace()")
    def trace(self, mode, callback):
        ...
    
    @deprecated("use trace_add() instead of trace_variable()")
    def trace_variable(self, mode, callback):
        ...
    
    @deprecated("use trace_remove() instead of trace_vdelete()")
    def trace_vdelete(self, mode, cbname) -> None:
        ...
    
    @deprecated("use trace_info() instead of trace_vinfo()")
    def trace_vinfo(self):
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __del__(self) -> None:
        ...
    


class StringVar(Variable):
    def __init__(self, master: Misc | None = ..., value: str | None = ..., name: str | None = ...) -> None:
        ...
    
    def set(self, value: str) -> None:
        ...
    
    initialize = ...
    def get(self) -> str:
        ...
    


class IntVar(Variable):
    def __init__(self, master: Misc | None = ..., value: int | None = ..., name: str | None = ...) -> None:
        ...
    
    def set(self, value: int) -> None:
        ...
    
    initialize = ...
    def get(self) -> int:
        ...
    


class DoubleVar(Variable):
    def __init__(self, master: Misc | None = ..., value: float | None = ..., name: str | None = ...) -> None:
        ...
    
    def set(self, value: float) -> None:
        ...
    
    initialize = ...
    def get(self) -> float:
        ...
    


class BooleanVar(Variable):
    def __init__(self, master: Misc | None = ..., value: bool | None = ..., name: str | None = ...) -> None:
        ...
    
    def set(self, value: bool) -> None:
        ...
    
    initialize = ...
    def get(self) -> bool:
        ...
    


def mainloop(n: int = ...) -> None:
    ...

getint: Incomplete
getdouble: Incomplete
def getboolean(s):
    ...

_Ts = TypeVarTuple("_Ts")
class _GridIndexInfo(TypedDict, total=False):
    minsize: _ScreenUnits
    pad: _ScreenUnits
    uniform: str | None
    weight: int
    ...


class Misc:
    master: Misc | None
    tk: _tkinter.TkappType
    children: dict[str, Widget]
    def destroy(self) -> None:
        ...
    
    def deletecommand(self, name: str) -> None:
        ...
    
    def tk_strictMotif(self, boolean: Incomplete | None = ...):
        ...
    
    def tk_bisque(self) -> None:
        ...
    
    def tk_setPalette(self, *args, **kw) -> None:
        ...
    
    def wait_variable(self, name: str | Variable = ...) -> None:
        ...
    
    waitvar = ...
    def wait_window(self, window: Misc | None = ...) -> None:
        ...
    
    def wait_visibility(self, window: Misc | None = ...) -> None:
        ...
    
    def setvar(self, name: str = ..., value: str = ...) -> None:
        ...
    
    def getvar(self, name: str = ...):
        ...
    
    def getint(self, s):
        ...
    
    def getdouble(self, s):
        ...
    
    def getboolean(self, s):
        ...
    
    def focus_set(self) -> None:
        ...
    
    focus = ...
    def focus_force(self) -> None:
        ...
    
    def focus_get(self) -> Misc | None:
        ...
    
    def focus_displayof(self) -> Misc | None:
        ...
    
    def focus_lastfor(self) -> Misc | None:
        ...
    
    def tk_focusFollowsMouse(self) -> None:
        ...
    
    def tk_focusNext(self) -> Misc | None:
        ...
    
    def tk_focusPrev(self) -> Misc | None:
        ...
    
    def after(self, ms: int | Literal["idle"], func: Callable[[Unpack[_Ts]], object], *args: Unpack[_Ts]) -> str:
        ...
    
    def after_idle(self, func: Callable[[Unpack[_Ts]], object], *args: Unpack[_Ts]) -> str:
        ...
    
    def after_cancel(self, id: str) -> None:
        ...
    
    def bell(self, displayof: Literal[0] | Misc | None = ...) -> None:
        ...
    
    def clipboard_get(self, *, displayof: Misc = ..., type: str = ...) -> str:
        ...
    
    def clipboard_clear(self, *, displayof: Misc = ...) -> None:
        ...
    
    def clipboard_append(self, string: str, *, displayof: Misc = ..., format: str = ..., type: str = ...) -> None:
        ...
    
    def grab_current(self):
        ...
    
    def grab_release(self) -> None:
        ...
    
    def grab_set(self) -> None:
        ...
    
    def grab_set_global(self) -> None:
        ...
    
    def grab_status(self) -> Literal["local", "global"] | None:
        ...
    
    def option_add(self, pattern, value, priority: int | Literal["widgetDefault", "startupFile", "userDefault", "interactive"] | None = ...) -> None:
        ...
    
    def option_clear(self) -> None:
        ...
    
    def option_get(self, name, className):
        ...
    
    def option_readfile(self, fileName, priority: Incomplete | None = ...) -> None:
        ...
    
    def selection_clear(self, **kw) -> None:
        ...
    
    def selection_get(self, **kw):
        ...
    
    def selection_handle(self, command, **kw) -> None:
        ...
    
    def selection_own(self, **kw) -> None:
        ...
    
    def selection_own_get(self, **kw):
        ...
    
    def send(self, interp, cmd, *args):
        ...
    
    def lower(self, belowThis: Incomplete | None = ...) -> None:
        ...
    
    def tkraise(self, aboveThis: Incomplete | None = ...) -> None:
        ...
    
    lift = ...
    if sys.version_info >= (3, 11):
        def info_patchlevel(self) -> _VersionInfoType:
            ...
        
    def winfo_atom(self, name: str, displayof: Literal[0] | Misc | None = ...) -> int:
        ...
    
    def winfo_atomname(self, id: int, displayof: Literal[0] | Misc | None = ...) -> str:
        ...
    
    def winfo_cells(self) -> int:
        ...
    
    def winfo_children(self) -> list[Widget]:
        ...
    
    def winfo_class(self) -> str:
        ...
    
    def winfo_colormapfull(self) -> bool:
        ...
    
    def winfo_containing(self, rootX: int, rootY: int, displayof: Literal[0] | Misc | None = ...) -> Misc | None:
        ...
    
    def winfo_depth(self) -> int:
        ...
    
    def winfo_exists(self) -> bool:
        ...
    
    def winfo_fpixels(self, number: _ScreenUnits) -> float:
        ...
    
    def winfo_geometry(self) -> str:
        ...
    
    def winfo_height(self) -> int:
        ...
    
    def winfo_id(self) -> int:
        ...
    
    def winfo_interps(self, displayof: Literal[0] | Misc | None = ...) -> tuple[str, ...]:
        ...
    
    def winfo_ismapped(self) -> bool:
        ...
    
    def winfo_manager(self) -> str:
        ...
    
    def winfo_name(self) -> str:
        ...
    
    def winfo_parent(self) -> str:
        ...
    
    def winfo_pathname(self, id: int, displayof: Literal[0] | Misc | None = ...):
        ...
    
    def winfo_pixels(self, number: _ScreenUnits) -> int:
        ...
    
    def winfo_pointerx(self) -> int:
        ...
    
    def winfo_pointerxy(self) -> tuple[int, int]:
        ...
    
    def winfo_pointery(self) -> int:
        ...
    
    def winfo_reqheight(self) -> int:
        ...
    
    def winfo_reqwidth(self) -> int:
        ...
    
    def winfo_rgb(self, color: str) -> tuple[int, int, int]:
        ...
    
    def winfo_rootx(self) -> int:
        ...
    
    def winfo_rooty(self) -> int:
        ...
    
    def winfo_screen(self) -> str:
        ...
    
    def winfo_screencells(self) -> int:
        ...
    
    def winfo_screendepth(self) -> int:
        ...
    
    def winfo_screenheight(self) -> int:
        ...
    
    def winfo_screenmmheight(self) -> int:
        ...
    
    def winfo_screenmmwidth(self) -> int:
        ...
    
    def winfo_screenvisual(self) -> str:
        ...
    
    def winfo_screenwidth(self) -> int:
        ...
    
    def winfo_server(self) -> str:
        ...
    
    def winfo_toplevel(self) -> Tk | Toplevel:
        ...
    
    def winfo_viewable(self) -> bool:
        ...
    
    def winfo_visual(self) -> str:
        ...
    
    def winfo_visualid(self) -> str:
        ...
    
    def winfo_visualsavailable(self, includeids: bool = ...) -> list[tuple[str, int]]:
        ...
    
    def winfo_vrootheight(self) -> int:
        ...
    
    def winfo_vrootwidth(self) -> int:
        ...
    
    def winfo_vrootx(self) -> int:
        ...
    
    def winfo_vrooty(self) -> int:
        ...
    
    def winfo_width(self) -> int:
        ...
    
    def winfo_x(self) -> int:
        ...
    
    def winfo_y(self) -> int:
        ...
    
    def update(self) -> None:
        ...
    
    def update_idletasks(self) -> None:
        ...
    
    @overload
    def bindtags(self, tagList: None = ...) -> tuple[str, ...]:
        ...
    
    @overload
    def bindtags(self, tagList: list[str] | tuple[str, ...]) -> None:
        ...
    
    @overload
    def bind(self, sequence: str | None = ..., func: Callable[[Event[Misc]], object] | None = ..., add: Literal["", "+"] | bool | None = ...) -> str:
        ...
    
    @overload
    def bind(self, sequence: str | None, func: str, add: Literal["", "+"] | bool | None = ...) -> None:
        ...
    
    @overload
    def bind(self, *, func: str, add: Literal["", "+"] | bool | None = ...) -> None:
        ...
    
    @overload
    def bind_all(self, sequence: str | None = ..., func: Callable[[Event[Misc]], object] | None = ..., add: Literal["", "+"] | bool | None = ...) -> str:
        ...
    
    @overload
    def bind_all(self, sequence: str | None, func: str, add: Literal["", "+"] | bool | None = ...) -> None:
        ...
    
    @overload
    def bind_all(self, *, func: str, add: Literal["", "+"] | bool | None = ...) -> None:
        ...
    
    @overload
    def bind_class(self, className: str, sequence: str | None = ..., func: Callable[[Event[Misc]], object] | None = ..., add: Literal["", "+"] | bool | None = ...) -> str:
        ...
    
    @overload
    def bind_class(self, className: str, sequence: str | None, func: str, add: Literal["", "+"] | bool | None = ...) -> None:
        ...
    
    @overload
    def bind_class(self, className: str, *, func: str, add: Literal["", "+"] | bool | None = ...) -> None:
        ...
    
    def unbind(self, sequence: str, funcid: str | None = ...) -> None:
        ...
    
    def unbind_all(self, sequence: str) -> None:
        ...
    
    def unbind_class(self, className: str, sequence: str) -> None:
        ...
    
    def mainloop(self, n: int = ...) -> None:
        ...
    
    def quit(self) -> None:
        ...
    
    def nametowidget(self, name: str | Misc | _tkinter.Tcl_Obj) -> Any:
        ...
    
    def register(self, func: Callable[..., object], subst: Callable[..., Sequence[Any]] | None = ..., needcleanup: int = ...) -> str:
        ...
    
    def keys(self) -> list[str]:
        ...
    
    @overload
    def pack_propagate(self, flag: bool) -> bool | None:
        ...
    
    @overload
    def pack_propagate(self) -> None:
        ...
    
    propagate = ...
    def grid_anchor(self, anchor: _Anchor | None = ...) -> None:
        ...
    
    anchor = ...
    @overload
    def grid_bbox(self, column: None = ..., row: None = ..., col2: None = ..., row2: None = ...) -> tuple[int, int, int, int] | None:
        ...
    
    @overload
    def grid_bbox(self, column: int, row: int, col2: None = ..., row2: None = ...) -> tuple[int, int, int, int] | None:
        ...
    
    @overload
    def grid_bbox(self, column: int, row: int, col2: int, row2: int) -> tuple[int, int, int, int] | None:
        ...
    
    bbox = ...
    def grid_columnconfigure(self, index: int | str | list[int] | tuple[int, ...], cnf: _GridIndexInfo = ..., *, minsize: _ScreenUnits = ..., pad: _ScreenUnits = ..., uniform: str = ..., weight: int = ...) -> _GridIndexInfo | Any:
        ...
    
    def grid_rowconfigure(self, index: int | str | list[int] | tuple[int, ...], cnf: _GridIndexInfo = ..., *, minsize: _ScreenUnits = ..., pad: _ScreenUnits = ..., uniform: str = ..., weight: int = ...) -> _GridIndexInfo | Any:
        ...
    
    columnconfigure = ...
    rowconfigure = ...
    def grid_location(self, x: _ScreenUnits, y: _ScreenUnits) -> tuple[int, int]:
        ...
    
    @overload
    def grid_propagate(self, flag: bool) -> None:
        ...
    
    @overload
    def grid_propagate(self) -> bool:
        ...
    
    def grid_size(self) -> tuple[int, int]:
        ...
    
    size = ...
    def pack_slaves(self) -> list[Widget]:
        ...
    
    def grid_slaves(self, row: int | None = ..., column: int | None = ...) -> list[Widget]:
        ...
    
    def place_slaves(self) -> list[Widget]:
        ...
    
    slaves = ...
    def event_add(self, virtual: str, *sequences: str) -> None:
        ...
    
    def event_delete(self, virtual: str, *sequences: str) -> None:
        ...
    
    def event_generate(self, sequence: str, *, above: Misc | int = ..., borderwidth: _ScreenUnits = ..., button: int = ..., count: int = ..., data: Any = ..., delta: int = ..., detail: str = ..., focus: bool = ..., height: _ScreenUnits = ..., keycode: int = ..., keysym: str = ..., mode: str = ..., override: bool = ..., place: Literal["PlaceOnTop", "PlaceOnBottom"] = ..., root: Misc | int = ..., rootx: _ScreenUnits = ..., rooty: _ScreenUnits = ..., sendevent: bool = ..., serial: int = ..., state: int | str = ..., subwindow: Misc | int = ..., time: int = ..., warp: bool = ..., width: _ScreenUnits = ..., when: Literal["now", "tail", "head", "mark"] = ..., x: _ScreenUnits = ..., y: _ScreenUnits = ...) -> None:
        ...
    
    def event_info(self, virtual: str | None = ...) -> tuple[str, ...]:
        ...
    
    def image_names(self) -> tuple[str, ...]:
        ...
    
    def image_types(self) -> tuple[str, ...]:
        ...
    
    def __setitem__(self, key: str, value: Any) -> None:
        ...
    
    def __getitem__(self, key: str) -> Any:
        ...
    
    def cget(self, key: str) -> Any:
        ...
    
    def configure(self, cnf: Any = ...) -> Any:
        ...
    


class CallWrapper:
    func: Incomplete
    subst: Incomplete
    widget: Incomplete
    def __init__(self, func, subst, widget) -> None:
        ...
    
    def __call__(self, *args):
        ...
    


class XView:
    @overload
    def xview(self) -> tuple[float, float]:
        ...
    
    @overload
    def xview(self, *args):
        ...
    
    def xview_moveto(self, fraction: float) -> None:
        ...
    
    @overload
    def xview_scroll(self, number: int, what: Literal["units", "pages"]) -> None:
        ...
    
    @overload
    def xview_scroll(self, number: _ScreenUnits, what: Literal["pixels"]) -> None:
        ...
    


class YView:
    @overload
    def yview(self) -> tuple[float, float]:
        ...
    
    @overload
    def yview(self, *args):
        ...
    
    def yview_moveto(self, fraction: float) -> None:
        ...
    
    @overload
    def yview_scroll(self, number: int, what: Literal["units", "pages"]) -> None:
        ...
    
    @overload
    def yview_scroll(self, number: _ScreenUnits, what: Literal["pixels"]) -> None:
        ...
    


class Wm:
    @overload
    def wm_aspect(self, minNumer: int, minDenom: int, maxNumer: int, maxDenom: int) -> None:
        ...
    
    @overload
    def wm_aspect(self, minNumer: None = ..., minDenom: None = ..., maxNumer: None = ..., maxDenom: None = ...) -> tuple[int, int, int, int] | None:
        ...
    
    aspect = ...
    @overload
    def wm_attributes(self) -> tuple[Any, ...]:
        ...
    
    @overload
    def wm_attributes(self, __option: str):
        ...
    
    @overload
    def wm_attributes(self, __option: str, __value, *__other_option_value_pairs: Any) -> None:
        ...
    
    attributes = ...
    def wm_client(self, name: str | None = ...) -> str:
        ...
    
    client = ...
    @overload
    def wm_colormapwindows(self) -> list[Misc]:
        ...
    
    @overload
    def wm_colormapwindows(self, __wlist: list[Misc] | tuple[Misc, ...]) -> None:
        ...
    
    @overload
    def wm_colormapwindows(self, __first_wlist_item: Misc, *other_wlist_items: Misc) -> None:
        ...
    
    colormapwindows = ...
    def wm_command(self, value: str | None = ...) -> str:
        ...
    
    command = ...
    def wm_deiconify(self) -> None:
        ...
    
    deiconify = ...
    def wm_focusmodel(self, model: Literal["active", "passive"] | None = ...) -> Literal["active", "passive", ""]:
        ...
    
    focusmodel = ...
    def wm_forget(self, window: Wm) -> None:
        ...
    
    forget = ...
    def wm_frame(self) -> str:
        ...
    
    frame = ...
    @overload
    def wm_geometry(self, newGeometry: None = ...) -> str:
        ...
    
    @overload
    def wm_geometry(self, newGeometry: str) -> None:
        ...
    
    geometry = ...
    def wm_grid(self, baseWidth: Incomplete | None = ..., baseHeight: Incomplete | None = ..., widthInc: Incomplete | None = ..., heightInc: Incomplete | None = ...):
        ...
    
    grid = ...
    def wm_group(self, pathName: Incomplete | None = ...):
        ...
    
    group = ...
    def wm_iconbitmap(self, bitmap: Incomplete | None = ..., default: Incomplete | None = ...):
        ...
    
    iconbitmap = ...
    def wm_iconify(self) -> None:
        ...
    
    iconify = ...
    def wm_iconmask(self, bitmap: Incomplete | None = ...):
        ...
    
    iconmask = ...
    def wm_iconname(self, newName: Incomplete | None = ...) -> str:
        ...
    
    iconname = ...
    def wm_iconphoto(self, default: bool, __image1: _PhotoImageLike | str, *args: _PhotoImageLike | str) -> None:
        ...
    
    iconphoto = ...
    def wm_iconposition(self, x: int | None = ..., y: int | None = ...) -> tuple[int, int] | None:
        ...
    
    iconposition = ...
    def wm_iconwindow(self, pathName: Incomplete | None = ...):
        ...
    
    iconwindow = ...
    def wm_manage(self, widget) -> None:
        ...
    
    manage = ...
    @overload
    def wm_maxsize(self, width: None = ..., height: None = ...) -> tuple[int, int]:
        ...
    
    @overload
    def wm_maxsize(self, width: int, height: int) -> None:
        ...
    
    maxsize = ...
    @overload
    def wm_minsize(self, width: None = ..., height: None = ...) -> tuple[int, int]:
        ...
    
    @overload
    def wm_minsize(self, width: int, height: int) -> None:
        ...
    
    minsize = ...
    @overload
    def wm_overrideredirect(self, boolean: None = ...) -> bool | None:
        ...
    
    @overload
    def wm_overrideredirect(self, boolean: bool) -> None:
        ...
    
    overrideredirect = ...
    def wm_positionfrom(self, who: Literal["program", "user"] | None = ...) -> Literal["", "program", "user"]:
        ...
    
    positionfrom = ...
    @overload
    def wm_protocol(self, name: str, func: Callable[[], object] | str) -> None:
        ...
    
    @overload
    def wm_protocol(self, name: str, func: None = ...) -> str:
        ...
    
    @overload
    def wm_protocol(self, name: None = ..., func: None = ...) -> tuple[str, ...]:
        ...
    
    protocol = ...
    @overload
    def wm_resizable(self, width: None = ..., height: None = ...) -> tuple[bool, bool]:
        ...
    
    @overload
    def wm_resizable(self, width: bool, height: bool) -> None:
        ...
    
    resizable = ...
    def wm_sizefrom(self, who: Literal["program", "user"] | None = ...) -> Literal["", "program", "user"]:
        ...
    
    sizefrom = ...
    @overload
    def wm_state(self, newstate: None = ...) -> str:
        ...
    
    @overload
    def wm_state(self, newstate: str) -> None:
        ...
    
    state = ...
    @overload
    def wm_title(self, string: None = ...) -> str:
        ...
    
    @overload
    def wm_title(self, string: str) -> None:
        ...
    
    title = ...
    @overload
    def wm_transient(self, master: None = ...) -> _tkinter.Tcl_Obj:
        ...
    
    @overload
    def wm_transient(self, master: Wm | _tkinter.Tcl_Obj) -> None:
        ...
    
    transient = ...
    def wm_withdraw(self) -> None:
        ...
    
    withdraw = ...


class Tk(Misc, Wm):
    master: None
    def __init__(self, screenName: str | None = ..., baseName: str | None = ..., className: str = ..., useTk: bool = ..., sync: bool = ..., use: str | None = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., height: _ScreenUnits = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., menu: Menu = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., takefocus: _TakeFocusValue = ..., width: _ScreenUnits = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def destroy(self) -> None:
        ...
    
    def readprofile(self, baseName: str, className: str) -> None:
        ...
    
    report_callback_exception: Callable[[type[BaseException], BaseException, TracebackType | None], object]
    def adderrorinfo(self, __msg):
        ...
    
    def call(self, __command: Any, *args: Any) -> Any:
        ...
    
    def createcommand(self, __name, __func):
        ...
    
    if sys.platform != "win32":
        ...
    def createtimerhandler(self, __milliseconds, __func):
        ...
    
    def dooneevent(self, __flags: int = ...):
        ...
    
    def eval(self, __script: str) -> str:
        ...
    
    def evalfile(self, __fileName):
        ...
    
    def exprboolean(self, __s):
        ...
    
    def exprdouble(self, __s):
        ...
    
    def exprlong(self, __s):
        ...
    
    def exprstring(self, __s):
        ...
    
    def globalgetvar(self, *args, **kwargs):
        ...
    
    def globalsetvar(self, *args, **kwargs):
        ...
    
    def globalunsetvar(self, *args, **kwargs):
        ...
    
    def interpaddr(self):
        ...
    
    def loadtk(self) -> None:
        ...
    
    def record(self, __script):
        ...
    
    if sys.version_info < (3, 11):
        ...
    def splitlist(self, __arg):
        ...
    
    def unsetvar(self, *args, **kwargs):
        ...
    
    def wantobjects(self, *args, **kwargs):
        ...
    
    def willdispatch(self):
        ...
    


def Tcl(screenName: str | None = ..., baseName: str | None = ..., className: str = ..., useTk: bool = ...) -> Tk:
    ...

_InMiscTotal = TypedDict("_InMiscTotal", { "in": Misc })
_InMiscNonTotal = TypedDict("_InMiscNonTotal", { "in": Misc }, total=False)
class _PackInfo(_InMiscTotal):
    anchor: _Anchor
    expand: bool
    fill: Literal["none", "x", "y", "both"]
    side: Literal["left", "right", "top", "bottom"]
    ipadx: int
    ipady: int
    padx: int | tuple[int, int]
    pady: int | tuple[int, int]
    ...


class Pack:
    def pack_configure(self, cnf: Mapping[str, Any] | None = ..., *, after: Misc = ..., anchor: _Anchor = ..., before: Misc = ..., expand: bool | Literal[0, 1] = ..., fill: Literal["none", "x", "y", "both"] = ..., side: Literal["left", "right", "top", "bottom"] = ..., ipadx: _ScreenUnits = ..., ipady: _ScreenUnits = ..., padx: _ScreenUnits | tuple[_ScreenUnits, _ScreenUnits] = ..., pady: _ScreenUnits | tuple[_ScreenUnits, _ScreenUnits] = ..., in_: Misc = ..., **kw: Any) -> None:
        ...
    
    def pack_forget(self) -> None:
        ...
    
    def pack_info(self) -> _PackInfo:
        ...
    
    pack = ...
    forget = ...
    propagate = ...


class _PlaceInfo(_InMiscNonTotal):
    anchor: _Anchor
    bordermode: Literal["inside", "outside", "ignore"]
    width: str
    height: str
    x: str
    y: str
    relheight: str
    relwidth: str
    relx: str
    rely: str
    ...


class Place:
    def place_configure(self, cnf: Mapping[str, Any] | None = ..., *, anchor: _Anchor = ..., bordermode: Literal["inside", "outside", "ignore"] = ..., width: _ScreenUnits = ..., height: _ScreenUnits = ..., x: _ScreenUnits = ..., y: _ScreenUnits = ..., relheight: str | float = ..., relwidth: str | float = ..., relx: str | float = ..., rely: str | float = ..., in_: Misc = ..., **kw: Any) -> None:
        ...
    
    def place_forget(self) -> None:
        ...
    
    def place_info(self) -> _PlaceInfo:
        ...
    
    place = ...
    info = ...


class _GridInfo(_InMiscNonTotal):
    column: int
    columnspan: int
    row: int
    rowspan: int
    ipadx: int
    ipady: int
    padx: int | tuple[int, int]
    pady: int | tuple[int, int]
    sticky: str
    ...


class Grid:
    def grid_configure(self, cnf: Mapping[str, Any] | None = ..., *, column: int = ..., columnspan: int = ..., row: int = ..., rowspan: int = ..., ipadx: _ScreenUnits = ..., ipady: _ScreenUnits = ..., padx: _ScreenUnits | tuple[_ScreenUnits, _ScreenUnits] = ..., pady: _ScreenUnits | tuple[_ScreenUnits, _ScreenUnits] = ..., sticky: str = ..., in_: Misc = ..., **kw: Any) -> None:
        ...
    
    def grid_forget(self) -> None:
        ...
    
    def grid_remove(self) -> None:
        ...
    
    def grid_info(self) -> _GridInfo:
        ...
    
    grid = ...
    location = ...
    size = ...


class BaseWidget(Misc):
    master: Misc
    widgetName: Incomplete
    def __init__(self, master, widgetName, cnf=..., kw=..., extra=...) -> None:
        ...
    
    def destroy(self) -> None:
        ...
    


class Widget(BaseWidget, Pack, Place, Grid):
    @overload
    def bind(self: _W, sequence: str | None = ..., func: Callable[[Event[_W]], object] | None = ..., add: Literal["", "+"] | bool | None = ...) -> str:
        ...
    
    @overload
    def bind(self, sequence: str | None, func: str, add: Literal["", "+"] | bool | None = ...) -> None:
        ...
    
    @overload
    def bind(self, *, func: str, add: Literal["", "+"] | bool | None = ...) -> None:
        ...
    


class Toplevel(BaseWidget, Wm):
    def __init__(self, master: Misc | None = ..., cnf: dict[str, Any] | None = ..., *, background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., class_: str = ..., colormap: Literal["new", ""] | Misc = ..., container: bool = ..., cursor: _Cursor = ..., height: _ScreenUnits = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., menu: Menu = ..., name: str = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., screen: str = ..., takefocus: _TakeFocusValue = ..., use: int = ..., visual: str | tuple[str, int] = ..., width: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., height: _ScreenUnits = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., menu: Menu = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., takefocus: _TakeFocusValue = ..., width: _ScreenUnits = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


class Button(Widget):
    def __init__(self, master: Misc | None = ..., cnf: dict[str, Any] | None = ..., *, activebackground: str = ..., activeforeground: str = ..., anchor: _Anchor = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., bitmap: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., command: _ButtonCommand = ..., compound: _Compound = ..., cursor: _Cursor = ..., default: Literal["normal", "active", "disabled"] = ..., disabledforeground: str = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., height: _ScreenUnits = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., image: _ImageSpec = ..., justify: Literal["left", "center", "right"] = ..., name: str = ..., overrelief: _Relief | Literal[""] = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., repeatdelay: int = ..., repeatinterval: int = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., text: float | str = ..., textvariable: Variable = ..., underline: int = ..., width: _ScreenUnits = ..., wraplength: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, activebackground: str = ..., activeforeground: str = ..., anchor: _Anchor = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., bitmap: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., command: _ButtonCommand = ..., compound: _Compound = ..., cursor: _Cursor = ..., default: Literal["normal", "active", "disabled"] = ..., disabledforeground: str = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., height: _ScreenUnits = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., image: _ImageSpec = ..., justify: Literal["left", "center", "right"] = ..., overrelief: _Relief | Literal[""] = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., repeatdelay: int = ..., repeatinterval: int = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., text: float | str = ..., textvariable: Variable = ..., underline: int = ..., width: _ScreenUnits = ..., wraplength: _ScreenUnits = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def flash(self) -> None:
        ...
    
    def invoke(self) -> Any:
        ...
    


class Canvas(Widget, XView, YView):
    def __init__(self, master: Misc | None = ..., cnf: dict[str, Any] | None = ..., *, background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., closeenough: float = ..., confine: bool = ..., cursor: _Cursor = ..., height: _ScreenUnits = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., insertbackground: str = ..., insertborderwidth: _ScreenUnits = ..., insertofftime: int = ..., insertontime: int = ..., insertwidth: _ScreenUnits = ..., name: str = ..., offset=..., relief: _Relief = ..., scrollregion: tuple[_ScreenUnits, _ScreenUnits, _ScreenUnits, _ScreenUnits] | tuple[()] = ..., selectbackground: str = ..., selectborderwidth: _ScreenUnits = ..., selectforeground: str = ..., state: Literal["normal", "disabled"] = ..., takefocus: _TakeFocusValue = ..., width: _ScreenUnits = ..., xscrollcommand: _XYScrollCommand = ..., xscrollincrement: _ScreenUnits = ..., yscrollcommand: _XYScrollCommand = ..., yscrollincrement: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., closeenough: float = ..., confine: bool = ..., cursor: _Cursor = ..., height: _ScreenUnits = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., insertbackground: str = ..., insertborderwidth: _ScreenUnits = ..., insertofftime: int = ..., insertontime: int = ..., insertwidth: _ScreenUnits = ..., offset=..., relief: _Relief = ..., scrollregion: tuple[_ScreenUnits, _ScreenUnits, _ScreenUnits, _ScreenUnits] | tuple[()] = ..., selectbackground: str = ..., selectborderwidth: _ScreenUnits = ..., selectforeground: str = ..., state: Literal["normal", "disabled"] = ..., takefocus: _TakeFocusValue = ..., width: _ScreenUnits = ..., xscrollcommand: _XYScrollCommand = ..., xscrollincrement: _ScreenUnits = ..., yscrollcommand: _XYScrollCommand = ..., yscrollincrement: _ScreenUnits = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def addtag(self, *args):
        ...
    
    def addtag_above(self, newtag: str, tagOrId: str | int) -> None:
        ...
    
    def addtag_all(self, newtag: str) -> None:
        ...
    
    def addtag_below(self, newtag: str, tagOrId: str | int) -> None:
        ...
    
    def addtag_closest(self, newtag: str, x: _ScreenUnits, y: _ScreenUnits, halo: _ScreenUnits | None = ..., start: str | int | None = ...) -> None:
        ...
    
    def addtag_enclosed(self, newtag: str, x1: _ScreenUnits, y1: _ScreenUnits, x2: _ScreenUnits, y2: _ScreenUnits) -> None:
        ...
    
    def addtag_overlapping(self, newtag: str, x1: _ScreenUnits, y1: _ScreenUnits, x2: _ScreenUnits, y2: _ScreenUnits) -> None:
        ...
    
    def addtag_withtag(self, newtag: str, tagOrId: str | int) -> None:
        ...
    
    def find(self, *args):
        ...
    
    def find_above(self, tagOrId: str | int) -> tuple[int, ...]:
        ...
    
    def find_all(self) -> tuple[int, ...]:
        ...
    
    def find_below(self, tagOrId: str | int) -> tuple[int, ...]:
        ...
    
    def find_closest(self, x: _ScreenUnits, y: _ScreenUnits, halo: _ScreenUnits | None = ..., start: str | int | None = ...) -> tuple[int, ...]:
        ...
    
    def find_enclosed(self, x1: _ScreenUnits, y1: _ScreenUnits, x2: _ScreenUnits, y2: _ScreenUnits) -> tuple[int, ...]:
        ...
    
    def find_overlapping(self, x1: _ScreenUnits, y1: _ScreenUnits, x2: _ScreenUnits, y2: float) -> tuple[int, ...]:
        ...
    
    def find_withtag(self, tagOrId: str | int) -> tuple[int, ...]:
        ...
    
    def bbox(self, *args: str | int) -> tuple[int, int, int, int]:
        ...
    
    @overload
    def tag_bind(self, tagOrId: str | int, sequence: str | None = ..., func: Callable[[Event[Canvas]], object] | None = ..., add: Literal["", "+"] | bool | None = ...) -> str:
        ...
    
    @overload
    def tag_bind(self, tagOrId: str | int, sequence: str | None, func: str, add: Literal["", "+"] | bool | None = ...) -> None:
        ...
    
    @overload
    def tag_bind(self, tagOrId: str | int, *, func: str, add: Literal["", "+"] | bool | None = ...) -> None:
        ...
    
    def tag_unbind(self, tagOrId: str | int, sequence: str, funcid: str | None = ...) -> None:
        ...
    
    def canvasx(self, screenx, gridspacing: Incomplete | None = ...):
        ...
    
    def canvasy(self, screeny, gridspacing: Incomplete | None = ...):
        ...
    
    @overload
    def coords(self, __tagOrId: str | int) -> list[float]:
        ...
    
    @overload
    def coords(self, __tagOrId: str | int, __args: list[int] | list[float] | tuple[float, ...]) -> None:
        ...
    
    @overload
    def coords(self, __tagOrId: str | int, __x1: float, __y1: float, *args: float) -> None:
        ...
    
    def create_arc(self, *args, **kw) -> int:
        ...
    
    def create_bitmap(self, *args, **kw) -> int:
        ...
    
    def create_image(self, *args, **kw) -> int:
        ...
    
    @overload
    def create_line(self, __x0: float, __y0: float, __x1: float, __y1: float, *, activedash: str | int | list[int] | tuple[int, ...] = ..., activefill: str = ..., activestipple: str = ..., activewidth: _ScreenUnits = ..., arrow: Literal["first", "last", "both"] = ..., arrowshape: tuple[float, float, float] = ..., capstyle: Literal["round", "projecting", "butt"] = ..., dash: str | int | list[int] | tuple[int, ...] = ..., dashoffset: _ScreenUnits = ..., disableddash: str | int | list[int] | tuple[int, ...] = ..., disabledfill: str = ..., disabledstipple: str = ..., disabledwidth: _ScreenUnits = ..., fill: str = ..., joinstyle: Literal["round", "bevel", "miter"] = ..., offset: _ScreenUnits = ..., smooth: bool = ..., splinesteps: float = ..., state: Literal["normal", "hidden", "disabled"] = ..., stipple: str = ..., tags: str | list[str] | tuple[str, ...] = ..., width: _ScreenUnits = ...) -> int:
        ...
    
    @overload
    def create_line(self, __xy_pair_0: tuple[float, float], __xy_pair_1: tuple[float, float], *, activedash: str | int | list[int] | tuple[int, ...] = ..., activefill: str = ..., activestipple: str = ..., activewidth: _ScreenUnits = ..., arrow: Literal["first", "last", "both"] = ..., arrowshape: tuple[float, float, float] = ..., capstyle: Literal["round", "projecting", "butt"] = ..., dash: str | int | list[int] | tuple[int, ...] = ..., dashoffset: _ScreenUnits = ..., disableddash: str | int | list[int] | tuple[int, ...] = ..., disabledfill: str = ..., disabledstipple: str = ..., disabledwidth: _ScreenUnits = ..., fill: str = ..., joinstyle: Literal["round", "bevel", "miter"] = ..., offset: _ScreenUnits = ..., smooth: bool = ..., splinesteps: float = ..., state: Literal["normal", "hidden", "disabled"] = ..., stipple: str = ..., tags: str | list[str] | tuple[str, ...] = ..., width: _ScreenUnits = ...) -> int:
        ...
    
    @overload
    def create_line(self, __coords: (tuple[float, float, float, float] | tuple[tuple[float, float], tuple[float, float]] | list[int] | list[float] | list[tuple[int, int]] | list[tuple[float, float]]), *, activedash: str | int | list[int] | tuple[int, ...] = ..., activefill: str = ..., activestipple: str = ..., activewidth: _ScreenUnits = ..., arrow: Literal["first", "last", "both"] = ..., arrowshape: tuple[float, float, float] = ..., capstyle: Literal["round", "projecting", "butt"] = ..., dash: str | int | list[int] | tuple[int, ...] = ..., dashoffset: _ScreenUnits = ..., disableddash: str | int | list[int] | tuple[int, ...] = ..., disabledfill: str = ..., disabledstipple: str = ..., disabledwidth: _ScreenUnits = ..., fill: str = ..., joinstyle: Literal["round", "bevel", "miter"] = ..., offset: _ScreenUnits = ..., smooth: bool = ..., splinesteps: float = ..., state: Literal["normal", "hidden", "disabled"] = ..., stipple: str = ..., tags: str | list[str] | tuple[str, ...] = ..., width: _ScreenUnits = ...) -> int:
        ...
    
    @overload
    def create_oval(self, __x0: float, __y0: float, __x1: float, __y1: float, *, activedash: str | int | list[int] | tuple[int, ...] = ..., activefill: str = ..., activeoutline: str = ..., activeoutlinestipple: str = ..., activestipple: str = ..., activewidth: _ScreenUnits = ..., dash: str | int | list[int] | tuple[int, ...] = ..., dashoffset: _ScreenUnits = ..., disableddash: str | int | list[int] | tuple[int, ...] = ..., disabledfill: str = ..., disabledoutline: str = ..., disabledoutlinestipple: str = ..., disabledstipple: str = ..., disabledwidth: _ScreenUnits = ..., fill: str = ..., offset: _ScreenUnits = ..., outline: str = ..., outlineoffset: _ScreenUnits = ..., outlinestipple: str = ..., state: Literal["normal", "hidden", "disabled"] = ..., stipple: str = ..., tags: str | list[str] | tuple[str, ...] = ..., width: _ScreenUnits = ...) -> int:
        ...
    
    @overload
    def create_oval(self, __xy_pair_0: tuple[float, float], __xy_pair_1: tuple[float, float], *, activedash: str | int | list[int] | tuple[int, ...] = ..., activefill: str = ..., activeoutline: str = ..., activeoutlinestipple: str = ..., activestipple: str = ..., activewidth: _ScreenUnits = ..., dash: str | int | list[int] | tuple[int, ...] = ..., dashoffset: _ScreenUnits = ..., disableddash: str | int | list[int] | tuple[int, ...] = ..., disabledfill: str = ..., disabledoutline: str = ..., disabledoutlinestipple: str = ..., disabledstipple: str = ..., disabledwidth: _ScreenUnits = ..., fill: str = ..., offset: _ScreenUnits = ..., outline: str = ..., outlineoffset: _ScreenUnits = ..., outlinestipple: str = ..., state: Literal["normal", "hidden", "disabled"] = ..., stipple: str = ..., tags: str | list[str] | tuple[str, ...] = ..., width: _ScreenUnits = ...) -> int:
        ...
    
    @overload
    def create_oval(self, __coords: (tuple[float, float, float, float] | tuple[tuple[float, float], tuple[float, float]] | list[int] | list[float] | list[tuple[int, int]] | list[tuple[float, float]]), *, activedash: str | int | list[int] | tuple[int, ...] = ..., activefill: str = ..., activeoutline: str = ..., activeoutlinestipple: str = ..., activestipple: str = ..., activewidth: _ScreenUnits = ..., dash: str | int | list[int] | tuple[int, ...] = ..., dashoffset: _ScreenUnits = ..., disableddash: str | int | list[int] | tuple[int, ...] = ..., disabledfill: str = ..., disabledoutline: str = ..., disabledoutlinestipple: str = ..., disabledstipple: str = ..., disabledwidth: _ScreenUnits = ..., fill: str = ..., offset: _ScreenUnits = ..., outline: str = ..., outlineoffset: _ScreenUnits = ..., outlinestipple: str = ..., state: Literal["normal", "hidden", "disabled"] = ..., stipple: str = ..., tags: str | list[str] | tuple[str, ...] = ..., width: _ScreenUnits = ...) -> int:
        ...
    
    @overload
    def create_polygon(self, __x0: float, __y0: float, __x1: float, __y1: float, *xy_pairs: float, activedash: str | int | list[int] | tuple[int, ...] = ..., activefill: str = ..., activeoutline: str = ..., activeoutlinestipple: str = ..., activestipple: str = ..., activewidth: _ScreenUnits = ..., dash: str | int | list[int] | tuple[int, ...] = ..., dashoffset: _ScreenUnits = ..., disableddash: str | int | list[int] | tuple[int, ...] = ..., disabledfill: str = ..., disabledoutline: str = ..., disabledoutlinestipple: str = ..., disabledstipple: str = ..., disabledwidth: _ScreenUnits = ..., fill: str = ..., joinstyle: Literal["round", "bevel", "miter"] = ..., offset: _ScreenUnits = ..., outline: str = ..., outlineoffset: _ScreenUnits = ..., outlinestipple: str = ..., smooth: bool = ..., splinesteps: float = ..., state: Literal["normal", "hidden", "disabled"] = ..., stipple: str = ..., tags: str | list[str] | tuple[str, ...] = ..., width: _ScreenUnits = ...) -> int:
        ...
    
    @overload
    def create_polygon(self, __xy_pair_0: tuple[float, float], __xy_pair_1: tuple[float, float], *xy_pairs: tuple[float, float], activedash: str | int | list[int] | tuple[int, ...] = ..., activefill: str = ..., activeoutline: str = ..., activeoutlinestipple: str = ..., activestipple: str = ..., activewidth: _ScreenUnits = ..., dash: str | int | list[int] | tuple[int, ...] = ..., dashoffset: _ScreenUnits = ..., disableddash: str | int | list[int] | tuple[int, ...] = ..., disabledfill: str = ..., disabledoutline: str = ..., disabledoutlinestipple: str = ..., disabledstipple: str = ..., disabledwidth: _ScreenUnits = ..., fill: str = ..., joinstyle: Literal["round", "bevel", "miter"] = ..., offset: _ScreenUnits = ..., outline: str = ..., outlineoffset: _ScreenUnits = ..., outlinestipple: str = ..., smooth: bool = ..., splinesteps: float = ..., state: Literal["normal", "hidden", "disabled"] = ..., stipple: str = ..., tags: str | list[str] | tuple[str, ...] = ..., width: _ScreenUnits = ...) -> int:
        ...
    
    @overload
    def create_polygon(self, __coords: (tuple[float, ...] | tuple[tuple[float, float], ...] | list[int] | list[float] | list[tuple[int, int]] | list[tuple[float, float]]), *, activedash: str | int | list[int] | tuple[int, ...] = ..., activefill: str = ..., activeoutline: str = ..., activeoutlinestipple: str = ..., activestipple: str = ..., activewidth: _ScreenUnits = ..., dash: str | int | list[int] | tuple[int, ...] = ..., dashoffset: _ScreenUnits = ..., disableddash: str | int | list[int] | tuple[int, ...] = ..., disabledfill: str = ..., disabledoutline: str = ..., disabledoutlinestipple: str = ..., disabledstipple: str = ..., disabledwidth: _ScreenUnits = ..., fill: str = ..., joinstyle: Literal["round", "bevel", "miter"] = ..., offset: _ScreenUnits = ..., outline: str = ..., outlineoffset: _ScreenUnits = ..., outlinestipple: str = ..., smooth: bool = ..., splinesteps: float = ..., state: Literal["normal", "hidden", "disabled"] = ..., stipple: str = ..., tags: str | list[str] | tuple[str, ...] = ..., width: _ScreenUnits = ...) -> int:
        ...
    
    @overload
    def create_rectangle(self, __x0: float, __y0: float, __x1: float, __y1: float, *, activedash: str | int | list[int] | tuple[int, ...] = ..., activefill: str = ..., activeoutline: str = ..., activeoutlinestipple: str = ..., activestipple: str = ..., activewidth: _ScreenUnits = ..., dash: str | int | list[int] | tuple[int, ...] = ..., dashoffset: _ScreenUnits = ..., disableddash: str | int | list[int] | tuple[int, ...] = ..., disabledfill: str = ..., disabledoutline: str = ..., disabledoutlinestipple: str = ..., disabledstipple: str = ..., disabledwidth: _ScreenUnits = ..., fill: str = ..., offset: _ScreenUnits = ..., outline: str = ..., outlineoffset: _ScreenUnits = ..., outlinestipple: str = ..., state: Literal["normal", "hidden", "disabled"] = ..., stipple: str = ..., tags: str | list[str] | tuple[str, ...] = ..., width: _ScreenUnits = ...) -> int:
        ...
    
    @overload
    def create_rectangle(self, __xy_pair_0: tuple[float, float], __xy_pair_1: tuple[float, float], *, activedash: str | int | list[int] | tuple[int, ...] = ..., activefill: str = ..., activeoutline: str = ..., activeoutlinestipple: str = ..., activestipple: str = ..., activewidth: _ScreenUnits = ..., dash: str | int | list[int] | tuple[int, ...] = ..., dashoffset: _ScreenUnits = ..., disableddash: str | int | list[int] | tuple[int, ...] = ..., disabledfill: str = ..., disabledoutline: str = ..., disabledoutlinestipple: str = ..., disabledstipple: str = ..., disabledwidth: _ScreenUnits = ..., fill: str = ..., offset: _ScreenUnits = ..., outline: str = ..., outlineoffset: _ScreenUnits = ..., outlinestipple: str = ..., state: Literal["normal", "hidden", "disabled"] = ..., stipple: str = ..., tags: str | list[str] | tuple[str, ...] = ..., width: _ScreenUnits = ...) -> int:
        ...
    
    @overload
    def create_rectangle(self, __coords: (tuple[float, float, float, float] | tuple[tuple[float, float], tuple[float, float]] | list[int] | list[float] | list[tuple[int, int]] | list[tuple[float, float]]), *, activedash: str | int | list[int] | tuple[int, ...] = ..., activefill: str = ..., activeoutline: str = ..., activeoutlinestipple: str = ..., activestipple: str = ..., activewidth: _ScreenUnits = ..., dash: str | int | list[int] | tuple[int, ...] = ..., dashoffset: _ScreenUnits = ..., disableddash: str | int | list[int] | tuple[int, ...] = ..., disabledfill: str = ..., disabledoutline: str = ..., disabledoutlinestipple: str = ..., disabledstipple: str = ..., disabledwidth: _ScreenUnits = ..., fill: str = ..., offset: _ScreenUnits = ..., outline: str = ..., outlineoffset: _ScreenUnits = ..., outlinestipple: str = ..., state: Literal["normal", "hidden", "disabled"] = ..., stipple: str = ..., tags: str | list[str] | tuple[str, ...] = ..., width: _ScreenUnits = ...) -> int:
        ...
    
    @overload
    def create_text(self, __x: float, __y: float, *, activefill: str = ..., activestipple: str = ..., anchor: _Anchor = ..., angle: float | str = ..., disabledfill: str = ..., disabledstipple: str = ..., fill: str = ..., font: _FontDescription = ..., justify: Literal["left", "center", "right"] = ..., offset: _ScreenUnits = ..., state: Literal["normal", "hidden", "disabled"] = ..., stipple: str = ..., tags: str | list[str] | tuple[str, ...] = ..., text: float | str = ..., width: _ScreenUnits = ...) -> int:
        ...
    
    @overload
    def create_text(self, __coords: tuple[float, float] | list[int] | list[float], *, activefill: str = ..., activestipple: str = ..., anchor: _Anchor = ..., angle: float | str = ..., disabledfill: str = ..., disabledstipple: str = ..., fill: str = ..., font: _FontDescription = ..., justify: Literal["left", "center", "right"] = ..., offset: _ScreenUnits = ..., state: Literal["normal", "hidden", "disabled"] = ..., stipple: str = ..., tags: str | list[str] | tuple[str, ...] = ..., text: float | str = ..., width: _ScreenUnits = ...) -> int:
        ...
    
    @overload
    def create_window(self, __x: float, __y: float, *, anchor: _Anchor = ..., height: _ScreenUnits = ..., state: Literal["normal", "hidden", "disabled"] = ..., tags: str | list[str] | tuple[str, ...] = ..., width: _ScreenUnits = ..., window: Widget = ...) -> int:
        ...
    
    @overload
    def create_window(self, __coords: tuple[float, float] | list[int] | list[float], *, anchor: _Anchor = ..., height: _ScreenUnits = ..., state: Literal["normal", "hidden", "disabled"] = ..., tags: str | list[str] | tuple[str, ...] = ..., width: _ScreenUnits = ..., window: Widget = ...) -> int:
        ...
    
    def dchars(self, *args) -> None:
        ...
    
    def delete(self, *tagsOrCanvasIds: str | int) -> None:
        ...
    
    @overload
    def dtag(self, __tag: str, __tag_to_delete: str | None = ...) -> None:
        ...
    
    @overload
    def dtag(self, __id: int, __tag_to_delete: str) -> None:
        ...
    
    def focus(self, *args):
        ...
    
    def gettags(self, __tagOrId: str | int) -> tuple[str, ...]:
        ...
    
    def icursor(self, *args) -> None:
        ...
    
    def index(self, *args):
        ...
    
    def insert(self, *args) -> None:
        ...
    
    def itemcget(self, tagOrId, option):
        ...
    
    def itemconfigure(self, tagOrId: str | int, cnf: dict[str, Any] | None = ..., **kw: Any) -> dict[str, tuple[str, str, str, str, str]] | None:
        ...
    
    itemconfig = ...
    def move(self, *args) -> None:
        ...
    
    def moveto(self, tagOrId: str | int, x: Literal[""] | float = ..., y: Literal[""] | float = ...) -> None:
        ...
    
    def postscript(self, cnf=..., **kw):
        ...
    
    def tag_lower(self, __first: str | int, __second: str | int | None = ...) -> None:
        ...
    
    def lower(self, __first: str | int, __second: str | int | None = ...) -> None:
        ...
    
    def tag_raise(self, __first: str | int, __second: str | int | None = ...) -> None:
        ...
    
    def tkraise(self, __first: str | int, __second: str | int | None = ...) -> None:
        ...
    
    def lift(self, __first: str | int, __second: str | int | None = ...) -> None:
        ...
    
    def scale(self, __tagOrId: str | int, __xOrigin: _ScreenUnits, __yOrigin: _ScreenUnits, __xScale: float, __yScale: float) -> None:
        ...
    
    def scan_mark(self, x, y) -> None:
        ...
    
    def scan_dragto(self, x, y, gain: int = ...) -> None:
        ...
    
    def select_adjust(self, tagOrId, index) -> None:
        ...
    
    def select_clear(self) -> None:
        ...
    
    def select_from(self, tagOrId, index) -> None:
        ...
    
    def select_item(self):
        ...
    
    def select_to(self, tagOrId, index) -> None:
        ...
    
    def type(self, tagOrId: str | int) -> int | None:
        ...
    


class Checkbutton(Widget):
    def __init__(self, master: Misc | None = ..., cnf: dict[str, Any] | None = ..., *, activebackground: str = ..., activeforeground: str = ..., anchor: _Anchor = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., bitmap: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., command: _ButtonCommand = ..., compound: _Compound = ..., cursor: _Cursor = ..., disabledforeground: str = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., height: _ScreenUnits = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., image: _ImageSpec = ..., indicatoron: bool = ..., justify: Literal["left", "center", "right"] = ..., name: str = ..., offrelief: _Relief = ..., offvalue: Any = ..., onvalue: Any = ..., overrelief: _Relief | Literal[""] = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., selectcolor: str = ..., selectimage: _ImageSpec = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., text: float | str = ..., textvariable: Variable = ..., tristateimage: _ImageSpec = ..., tristatevalue: Any = ..., underline: int = ..., variable: Variable | Literal[""] = ..., width: _ScreenUnits = ..., wraplength: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, activebackground: str = ..., activeforeground: str = ..., anchor: _Anchor = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., bitmap: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., command: _ButtonCommand = ..., compound: _Compound = ..., cursor: _Cursor = ..., disabledforeground: str = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., height: _ScreenUnits = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., image: _ImageSpec = ..., indicatoron: bool = ..., justify: Literal["left", "center", "right"] = ..., offrelief: _Relief = ..., offvalue: Any = ..., onvalue: Any = ..., overrelief: _Relief | Literal[""] = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., selectcolor: str = ..., selectimage: _ImageSpec = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., text: float | str = ..., textvariable: Variable = ..., tristateimage: _ImageSpec = ..., tristatevalue: Any = ..., underline: int = ..., variable: Variable | Literal[""] = ..., width: _ScreenUnits = ..., wraplength: _ScreenUnits = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def deselect(self) -> None:
        ...
    
    def flash(self) -> None:
        ...
    
    def invoke(self) -> Any:
        ...
    
    def select(self) -> None:
        ...
    
    def toggle(self) -> None:
        ...
    


class Entry(Widget, XView):
    def __init__(self, master: Misc | None = ..., cnf: dict[str, Any] | None = ..., *, background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., disabledbackground: str = ..., disabledforeground: str = ..., exportselection: bool = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., insertbackground: str = ..., insertborderwidth: _ScreenUnits = ..., insertofftime: int = ..., insertontime: int = ..., insertwidth: _ScreenUnits = ..., invalidcommand: _EntryValidateCommand = ..., invcmd: _EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., name: str = ..., readonlybackground: str = ..., relief: _Relief = ..., selectbackground: str = ..., selectborderwidth: _ScreenUnits = ..., selectforeground: str = ..., show: str = ..., state: Literal["normal", "disabled", "readonly"] = ..., takefocus: _TakeFocusValue = ..., textvariable: Variable = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: _EntryValidateCommand = ..., vcmd: _EntryValidateCommand = ..., width: int = ..., xscrollcommand: _XYScrollCommand = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., disabledbackground: str = ..., disabledforeground: str = ..., exportselection: bool = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., insertbackground: str = ..., insertborderwidth: _ScreenUnits = ..., insertofftime: int = ..., insertontime: int = ..., insertwidth: _ScreenUnits = ..., invalidcommand: _EntryValidateCommand = ..., invcmd: _EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., readonlybackground: str = ..., relief: _Relief = ..., selectbackground: str = ..., selectborderwidth: _ScreenUnits = ..., selectforeground: str = ..., show: str = ..., state: Literal["normal", "disabled", "readonly"] = ..., takefocus: _TakeFocusValue = ..., textvariable: Variable = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: _EntryValidateCommand = ..., vcmd: _EntryValidateCommand = ..., width: int = ..., xscrollcommand: _XYScrollCommand = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def delete(self, first: str | int, last: str | int | None = ...) -> None:
        ...
    
    def get(self) -> str:
        ...
    
    def icursor(self, index: str | int) -> None:
        ...
    
    def index(self, index: str | int) -> int:
        ...
    
    def insert(self, index: str | int, string: str) -> None:
        ...
    
    def scan_mark(self, x) -> None:
        ...
    
    def scan_dragto(self, x) -> None:
        ...
    
    def selection_adjust(self, index: str | int) -> None:
        ...
    
    def selection_clear(self) -> None:
        ...
    
    def selection_from(self, index: str | int) -> None:
        ...
    
    def selection_present(self) -> bool:
        ...
    
    def selection_range(self, start: str | int, end: str | int) -> None:
        ...
    
    def selection_to(self, index: str | int) -> None:
        ...
    
    select_adjust = ...
    select_clear = ...
    select_from = ...
    select_present = ...
    select_range = ...
    select_to = ...


class Frame(Widget):
    def __init__(self, master: Misc | None = ..., cnf: dict[str, Any] | None = ..., *, background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., class_: str = ..., colormap: Literal["new", ""] | Misc = ..., container: bool = ..., cursor: _Cursor = ..., height: _ScreenUnits = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., name: str = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., takefocus: _TakeFocusValue = ..., visual: str | tuple[str, int] = ..., width: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., height: _ScreenUnits = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., takefocus: _TakeFocusValue = ..., width: _ScreenUnits = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


class Label(Widget):
    def __init__(self, master: Misc | None = ..., cnf: dict[str, Any] | None = ..., *, activebackground: str = ..., activeforeground: str = ..., anchor: _Anchor = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., bitmap: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., compound: _Compound = ..., cursor: _Cursor = ..., disabledforeground: str = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., height: _ScreenUnits = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., image: _ImageSpec = ..., justify: Literal["left", "center", "right"] = ..., name: str = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., text: float | str = ..., textvariable: Variable = ..., underline: int = ..., width: _ScreenUnits = ..., wraplength: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, activebackground: str = ..., activeforeground: str = ..., anchor: _Anchor = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., bitmap: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., compound: _Compound = ..., cursor: _Cursor = ..., disabledforeground: str = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., height: _ScreenUnits = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., image: _ImageSpec = ..., justify: Literal["left", "center", "right"] = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., text: float | str = ..., textvariable: Variable = ..., underline: int = ..., width: _ScreenUnits = ..., wraplength: _ScreenUnits = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


class Listbox(Widget, XView, YView):
    def __init__(self, master: Misc | None = ..., cnf: dict[str, Any] | None = ..., *, activestyle: Literal["dotbox", "none", "underline"] = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., disabledforeground: str = ..., exportselection: bool | Literal[0, 1] = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., height: int = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., justify: Literal["left", "center", "right"] = ..., listvariable: Variable = ..., name: str = ..., relief: _Relief = ..., selectbackground: str = ..., selectborderwidth: _ScreenUnits = ..., selectforeground: str = ..., selectmode: str = ..., setgrid: bool = ..., state: Literal["normal", "disabled"] = ..., takefocus: _TakeFocusValue = ..., width: int = ..., xscrollcommand: _XYScrollCommand = ..., yscrollcommand: _XYScrollCommand = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, activestyle: Literal["dotbox", "none", "underline"] = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., disabledforeground: str = ..., exportselection: bool = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., height: int = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., justify: Literal["left", "center", "right"] = ..., listvariable: Variable = ..., relief: _Relief = ..., selectbackground: str = ..., selectborderwidth: _ScreenUnits = ..., selectforeground: str = ..., selectmode: str = ..., setgrid: bool = ..., state: Literal["normal", "disabled"] = ..., takefocus: _TakeFocusValue = ..., width: int = ..., xscrollcommand: _XYScrollCommand = ..., yscrollcommand: _XYScrollCommand = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def activate(self, index: str | int) -> None:
        ...
    
    def bbox(self, index: str | int) -> tuple[int, int, int, int] | None:
        ...
    
    def curselection(self):
        ...
    
    def delete(self, first: str | int, last: str | int | None = ...) -> None:
        ...
    
    def get(self, first: str | int, last: str | int | None = ...):
        ...
    
    def index(self, index: str | int) -> int:
        ...
    
    def insert(self, index: str | int, *elements: str | float) -> None:
        ...
    
    def nearest(self, y):
        ...
    
    def scan_mark(self, x, y) -> None:
        ...
    
    def scan_dragto(self, x, y) -> None:
        ...
    
    def see(self, index: str | int) -> None:
        ...
    
    def selection_anchor(self, index: str | int) -> None:
        ...
    
    select_anchor = ...
    def selection_clear(self, first: str | int, last: str | int | None = ...) -> None:
        ...
    
    select_clear = ...
    def selection_includes(self, index: str | int):
        ...
    
    select_includes = ...
    def selection_set(self, first: str | int, last: str | int | None = ...) -> None:
        ...
    
    select_set = ...
    def size(self) -> int:
        ...
    
    def itemcget(self, index: str | int, option):
        ...
    
    def itemconfigure(self, index: str | int, cnf: Incomplete | None = ..., **kw):
        ...
    
    itemconfig = ...


class Menu(Widget):
    def __init__(self, master: Misc | None = ..., cnf: dict[str, Any] | None = ..., *, activebackground: str = ..., activeborderwidth: _ScreenUnits = ..., activeforeground: str = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., disabledforeground: str = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., name: str = ..., postcommand: Callable[[], object] | str = ..., relief: _Relief = ..., selectcolor: str = ..., takefocus: _TakeFocusValue = ..., tearoff: bool | Literal[0, 1] = ..., tearoffcommand: Callable[[str, str], object] | str = ..., title: str = ..., type: Literal["menubar", "tearoff", "normal"] = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, activebackground: str = ..., activeborderwidth: _ScreenUnits = ..., activeforeground: str = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., disabledforeground: str = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., postcommand: Callable[[], object] | str = ..., relief: _Relief = ..., selectcolor: str = ..., takefocus: _TakeFocusValue = ..., tearoff: bool = ..., tearoffcommand: Callable[[str, str], object] | str = ..., title: str = ..., type: Literal["menubar", "tearoff", "normal"] = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def tk_popup(self, x: int, y: int, entry: str | int = ...) -> None:
        ...
    
    def activate(self, index: str | int) -> None:
        ...
    
    def add(self, itemType, cnf=..., **kw):
        ...
    
    def insert(self, index, itemType, cnf=..., **kw):
        ...
    
    def add_cascade(self, cnf: dict[str, Any] | None = ..., *, accelerator: str = ..., activebackground: str = ..., activeforeground: str = ..., background: str = ..., bitmap: str = ..., columnbreak: int = ..., command: Callable[[], object] | str = ..., compound: _Compound = ..., font: _FontDescription = ..., foreground: str = ..., hidemargin: bool = ..., image: _ImageSpec = ..., label: str = ..., menu: Menu = ..., state: Literal["normal", "active", "disabled"] = ..., underline: int = ...) -> None:
        ...
    
    def add_checkbutton(self, cnf: dict[str, Any] | None = ..., *, accelerator: str = ..., activebackground: str = ..., activeforeground: str = ..., background: str = ..., bitmap: str = ..., columnbreak: int = ..., command: Callable[[], object] | str = ..., compound: _Compound = ..., font: _FontDescription = ..., foreground: str = ..., hidemargin: bool = ..., image: _ImageSpec = ..., indicatoron: bool = ..., label: str = ..., offvalue: Any = ..., onvalue: Any = ..., selectcolor: str = ..., selectimage: _ImageSpec = ..., state: Literal["normal", "active", "disabled"] = ..., underline: int = ..., variable: Variable = ...) -> None:
        ...
    
    def add_command(self, cnf: dict[str, Any] | None = ..., *, accelerator: str = ..., activebackground: str = ..., activeforeground: str = ..., background: str = ..., bitmap: str = ..., columnbreak: int = ..., command: Callable[[], object] | str = ..., compound: _Compound = ..., font: _FontDescription = ..., foreground: str = ..., hidemargin: bool = ..., image: _ImageSpec = ..., label: str = ..., state: Literal["normal", "active", "disabled"] = ..., underline: int = ...) -> None:
        ...
    
    def add_radiobutton(self, cnf: dict[str, Any] | None = ..., *, accelerator: str = ..., activebackground: str = ..., activeforeground: str = ..., background: str = ..., bitmap: str = ..., columnbreak: int = ..., command: Callable[[], object] | str = ..., compound: _Compound = ..., font: _FontDescription = ..., foreground: str = ..., hidemargin: bool = ..., image: _ImageSpec = ..., indicatoron: bool = ..., label: str = ..., selectcolor: str = ..., selectimage: _ImageSpec = ..., state: Literal["normal", "active", "disabled"] = ..., underline: int = ..., value: Any = ..., variable: Variable = ...) -> None:
        ...
    
    def add_separator(self, cnf: dict[str, Any] | None = ..., *, background: str = ...) -> None:
        ...
    
    def insert_cascade(self, index: str | int, cnf: dict[str, Any] | None = ..., *, accelerator: str = ..., activebackground: str = ..., activeforeground: str = ..., background: str = ..., bitmap: str = ..., columnbreak: int = ..., command: Callable[[], object] | str = ..., compound: _Compound = ..., font: _FontDescription = ..., foreground: str = ..., hidemargin: bool = ..., image: _ImageSpec = ..., label: str = ..., menu: Menu = ..., state: Literal["normal", "active", "disabled"] = ..., underline: int = ...) -> None:
        ...
    
    def insert_checkbutton(self, index: str | int, cnf: dict[str, Any] | None = ..., *, accelerator: str = ..., activebackground: str = ..., activeforeground: str = ..., background: str = ..., bitmap: str = ..., columnbreak: int = ..., command: Callable[[], object] | str = ..., compound: _Compound = ..., font: _FontDescription = ..., foreground: str = ..., hidemargin: bool = ..., image: _ImageSpec = ..., indicatoron: bool = ..., label: str = ..., offvalue: Any = ..., onvalue: Any = ..., selectcolor: str = ..., selectimage: _ImageSpec = ..., state: Literal["normal", "active", "disabled"] = ..., underline: int = ..., variable: Variable = ...) -> None:
        ...
    
    def insert_command(self, index: str | int, cnf: dict[str, Any] | None = ..., *, accelerator: str = ..., activebackground: str = ..., activeforeground: str = ..., background: str = ..., bitmap: str = ..., columnbreak: int = ..., command: Callable[[], object] | str = ..., compound: _Compound = ..., font: _FontDescription = ..., foreground: str = ..., hidemargin: bool = ..., image: _ImageSpec = ..., label: str = ..., state: Literal["normal", "active", "disabled"] = ..., underline: int = ...) -> None:
        ...
    
    def insert_radiobutton(self, index: str | int, cnf: dict[str, Any] | None = ..., *, accelerator: str = ..., activebackground: str = ..., activeforeground: str = ..., background: str = ..., bitmap: str = ..., columnbreak: int = ..., command: Callable[[], object] | str = ..., compound: _Compound = ..., font: _FontDescription = ..., foreground: str = ..., hidemargin: bool = ..., image: _ImageSpec = ..., indicatoron: bool = ..., label: str = ..., selectcolor: str = ..., selectimage: _ImageSpec = ..., state: Literal["normal", "active", "disabled"] = ..., underline: int = ..., value: Any = ..., variable: Variable = ...) -> None:
        ...
    
    def insert_separator(self, index: str | int, cnf: dict[str, Any] | None = ..., *, background: str = ...) -> None:
        ...
    
    def delete(self, index1: str | int, index2: str | int | None = ...) -> None:
        ...
    
    def entrycget(self, index: str | int, option: str) -> Any:
        ...
    
    def entryconfigure(self, index: str | int, cnf: dict[str, Any] | None = ..., **kw: Any) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    entryconfig = ...
    def index(self, index: str | int) -> int | None:
        ...
    
    def invoke(self, index: str | int) -> Any:
        ...
    
    def post(self, x: int, y: int) -> None:
        ...
    
    def type(self, index: str | int) -> Literal["cascade", "checkbutton", "command", "radiobutton", "separator"]:
        ...
    
    def unpost(self) -> None:
        ...
    
    def xposition(self, index: str | int) -> int:
        ...
    
    def yposition(self, index: str | int) -> int:
        ...
    


class Menubutton(Widget):
    def __init__(self, master: Misc | None = ..., cnf: dict[str, Any] | None = ..., *, activebackground: str = ..., activeforeground: str = ..., anchor: _Anchor = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., bitmap: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., compound: _Compound = ..., cursor: _Cursor = ..., direction: Literal["above", "below", "left", "right", "flush"] = ..., disabledforeground: str = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., height: _ScreenUnits = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., image: _ImageSpec = ..., indicatoron: bool = ..., justify: Literal["left", "center", "right"] = ..., menu: Menu = ..., name: str = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., text: float | str = ..., textvariable: Variable = ..., underline: int = ..., width: _ScreenUnits = ..., wraplength: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, activebackground: str = ..., activeforeground: str = ..., anchor: _Anchor = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., bitmap: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., compound: _Compound = ..., cursor: _Cursor = ..., direction: Literal["above", "below", "left", "right", "flush"] = ..., disabledforeground: str = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., height: _ScreenUnits = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., image: _ImageSpec = ..., indicatoron: bool = ..., justify: Literal["left", "center", "right"] = ..., menu: Menu = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., text: float | str = ..., textvariable: Variable = ..., underline: int = ..., width: _ScreenUnits = ..., wraplength: _ScreenUnits = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


class Message(Widget):
    def __init__(self, master: Misc | None = ..., cnf: dict[str, Any] | None = ..., *, anchor: _Anchor = ..., aspect: int = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., justify: Literal["left", "center", "right"] = ..., name: str = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., takefocus: _TakeFocusValue = ..., text: float | str = ..., textvariable: Variable = ..., width: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, anchor: _Anchor = ..., aspect: int = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., justify: Literal["left", "center", "right"] = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., takefocus: _TakeFocusValue = ..., text: float | str = ..., textvariable: Variable = ..., width: _ScreenUnits = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


class Radiobutton(Widget):
    def __init__(self, master: Misc | None = ..., cnf: dict[str, Any] | None = ..., *, activebackground: str = ..., activeforeground: str = ..., anchor: _Anchor = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., bitmap: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., command: _ButtonCommand = ..., compound: _Compound = ..., cursor: _Cursor = ..., disabledforeground: str = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., height: _ScreenUnits = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., image: _ImageSpec = ..., indicatoron: bool = ..., justify: Literal["left", "center", "right"] = ..., name: str = ..., offrelief: _Relief = ..., overrelief: _Relief | Literal[""] = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., selectcolor: str = ..., selectimage: _ImageSpec = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., text: float | str = ..., textvariable: Variable = ..., tristateimage: _ImageSpec = ..., tristatevalue: Any = ..., underline: int = ..., value: Any = ..., variable: Variable | Literal[""] = ..., width: _ScreenUnits = ..., wraplength: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, activebackground: str = ..., activeforeground: str = ..., anchor: _Anchor = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., bitmap: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., command: _ButtonCommand = ..., compound: _Compound = ..., cursor: _Cursor = ..., disabledforeground: str = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., height: _ScreenUnits = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., image: _ImageSpec = ..., indicatoron: bool = ..., justify: Literal["left", "center", "right"] = ..., offrelief: _Relief = ..., overrelief: _Relief | Literal[""] = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., selectcolor: str = ..., selectimage: _ImageSpec = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., text: float | str = ..., textvariable: Variable = ..., tristateimage: _ImageSpec = ..., tristatevalue: Any = ..., underline: int = ..., value: Any = ..., variable: Variable | Literal[""] = ..., width: _ScreenUnits = ..., wraplength: _ScreenUnits = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def deselect(self) -> None:
        ...
    
    def flash(self) -> None:
        ...
    
    def invoke(self) -> Any:
        ...
    
    def select(self) -> None:
        ...
    


class Scale(Widget):
    def __init__(self, master: Misc | None = ..., cnf: dict[str, Any] | None = ..., *, activebackground: str = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., bigincrement: float = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., command: str | Callable[[str], object] = ..., cursor: _Cursor = ..., digits: int = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., from_: float = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., label: str = ..., length: _ScreenUnits = ..., name: str = ..., orient: Literal["horizontal", "vertical"] = ..., relief: _Relief = ..., repeatdelay: int = ..., repeatinterval: int = ..., resolution: float = ..., showvalue: bool = ..., sliderlength: _ScreenUnits = ..., sliderrelief: _Relief = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., tickinterval: float = ..., to: float = ..., troughcolor: str = ..., variable: IntVar | DoubleVar = ..., width: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, activebackground: str = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., bigincrement: float = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., command: str | Callable[[str], object] = ..., cursor: _Cursor = ..., digits: int = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., from_: float = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., label: str = ..., length: _ScreenUnits = ..., orient: Literal["horizontal", "vertical"] = ..., relief: _Relief = ..., repeatdelay: int = ..., repeatinterval: int = ..., resolution: float = ..., showvalue: bool = ..., sliderlength: _ScreenUnits = ..., sliderrelief: _Relief = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., tickinterval: float = ..., to: float = ..., troughcolor: str = ..., variable: IntVar | DoubleVar = ..., width: _ScreenUnits = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def get(self) -> float:
        ...
    
    def set(self, value: int) -> None:
        ...
    
    def coords(self, value: float | None = ...) -> tuple[int, int]:
        ...
    
    def identify(self, x, y) -> Literal["", "slider", "trough1", "trough2"]:
        ...
    


class Scrollbar(Widget):
    def __init__(self, master: Misc | None = ..., cnf: dict[str, Any] | None = ..., *, activebackground: str = ..., activerelief: _Relief = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., command: Callable[..., tuple[float, float] | None] | str = ..., cursor: _Cursor = ..., elementborderwidth: _ScreenUnits = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., jump: bool = ..., name: str = ..., orient: Literal["horizontal", "vertical"] = ..., relief: _Relief = ..., repeatdelay: int = ..., repeatinterval: int = ..., takefocus: _TakeFocusValue = ..., troughcolor: str = ..., width: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, activebackground: str = ..., activerelief: _Relief = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., command: Callable[..., tuple[float, float] | None] | str = ..., cursor: _Cursor = ..., elementborderwidth: _ScreenUnits = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., jump: bool = ..., orient: Literal["horizontal", "vertical"] = ..., relief: _Relief = ..., repeatdelay: int = ..., repeatinterval: int = ..., takefocus: _TakeFocusValue = ..., troughcolor: str = ..., width: _ScreenUnits = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def activate(self, index: Incomplete | None = ...):
        ...
    
    def delta(self, deltax: int, deltay: int) -> float:
        ...
    
    def fraction(self, x: int, y: int) -> float:
        ...
    
    def identify(self, x: int, y: int) -> Literal["arrow1", "arrow2", "slider", "trough1", "trough2", ""]:
        ...
    
    def get(self) -> tuple[float, float, float, float] | tuple[float, float]:
        ...
    
    def set(self, first: float | str, last: float | str) -> None:
        ...
    


_TextIndex: TypeAlias = ...
class Text(Widget, XView, YView):
    def __init__(self, master: Misc | None = ..., cnf: dict[str, Any] | None = ..., *, autoseparators: bool = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., blockcursor: bool = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., endline: int | Literal[""] = ..., exportselection: bool = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., height: _ScreenUnits = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., inactiveselectbackground: str = ..., insertbackground: str = ..., insertborderwidth: _ScreenUnits = ..., insertofftime: int = ..., insertontime: int = ..., insertunfocussed: Literal["none", "hollow", "solid"] = ..., insertwidth: _ScreenUnits = ..., maxundo: int = ..., name: str = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., selectbackground: str = ..., selectborderwidth: _ScreenUnits = ..., selectforeground: str = ..., setgrid: bool = ..., spacing1: _ScreenUnits = ..., spacing2: _ScreenUnits = ..., spacing3: _ScreenUnits = ..., startline: int | Literal[""] = ..., state: Literal["normal", "disabled"] = ..., tabs: _ScreenUnits | str | tuple[_ScreenUnits | str, ...] = ..., tabstyle: Literal["tabular", "wordprocessor"] = ..., takefocus: _TakeFocusValue = ..., undo: bool = ..., width: int = ..., wrap: Literal["none", "char", "word"] = ..., xscrollcommand: _XYScrollCommand = ..., yscrollcommand: _XYScrollCommand = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, autoseparators: bool = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., blockcursor: bool = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., endline: int | Literal[""] = ..., exportselection: bool = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., height: _ScreenUnits = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., inactiveselectbackground: str = ..., insertbackground: str = ..., insertborderwidth: _ScreenUnits = ..., insertofftime: int = ..., insertontime: int = ..., insertunfocussed: Literal["none", "hollow", "solid"] = ..., insertwidth: _ScreenUnits = ..., maxundo: int = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., selectbackground: str = ..., selectborderwidth: _ScreenUnits = ..., selectforeground: str = ..., setgrid: bool = ..., spacing1: _ScreenUnits = ..., spacing2: _ScreenUnits = ..., spacing3: _ScreenUnits = ..., startline: int | Literal[""] = ..., state: Literal["normal", "disabled"] = ..., tabs: _ScreenUnits | str | tuple[_ScreenUnits | str, ...] = ..., tabstyle: Literal["tabular", "wordprocessor"] = ..., takefocus: _TakeFocusValue = ..., undo: bool = ..., width: int = ..., wrap: Literal["none", "char", "word"] = ..., xscrollcommand: _XYScrollCommand = ..., yscrollcommand: _XYScrollCommand = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def bbox(self, index: _TextIndex) -> tuple[int, int, int, int] | None:
        ...
    
    def compare(self, index1: _TextIndex, op: Literal["<", "<=", "==", ">=", ">", "!="], index2: _TextIndex) -> bool:
        ...
    
    def count(self, index1, index2, *args):
        ...
    
    @overload
    def debug(self, boolean: None = ...) -> bool:
        ...
    
    @overload
    def debug(self, boolean: bool) -> None:
        ...
    
    def delete(self, index1: _TextIndex, index2: _TextIndex | None = ...) -> None:
        ...
    
    def dlineinfo(self, index: _TextIndex) -> tuple[int, int, int, int, int] | None:
        ...
    
    @overload
    def dump(self, index1: _TextIndex, index2: _TextIndex | None = ..., command: None = ..., *, all: bool = ..., image: bool = ..., mark: bool = ..., tag: bool = ..., text: bool = ..., window: bool = ...) -> list[tuple[str, str, str]]:
        ...
    
    @overload
    def dump(self, index1: _TextIndex, index2: _TextIndex | None, command: Callable[[str, str, str], object] | str, *, all: bool = ..., image: bool = ..., mark: bool = ..., tag: bool = ..., text: bool = ..., window: bool = ...) -> None:
        ...
    
    @overload
    def dump(self, index1: _TextIndex, index2: _TextIndex | None = ..., *, command: Callable[[str, str, str], object] | str, all: bool = ..., image: bool = ..., mark: bool = ..., tag: bool = ..., text: bool = ..., window: bool = ...) -> None:
        ...
    
    def edit(self, *args):
        ...
    
    @overload
    def edit_modified(self, arg: None = ...) -> bool:
        ...
    
    @overload
    def edit_modified(self, arg: bool) -> None:
        ...
    
    def edit_redo(self) -> None:
        ...
    
    def edit_reset(self) -> None:
        ...
    
    def edit_separator(self) -> None:
        ...
    
    def edit_undo(self) -> None:
        ...
    
    def get(self, index1: _TextIndex, index2: _TextIndex | None = ...) -> str:
        ...
    
    @overload
    def image_cget(self, index: _TextIndex, option: Literal["image", "name"]) -> str:
        ...
    
    @overload
    def image_cget(self, index: _TextIndex, option: Literal["padx", "pady"]) -> int:
        ...
    
    @overload
    def image_cget(self, index: _TextIndex, option: Literal["align"]) -> Literal["baseline", "bottom", "center", "top"]:
        ...
    
    @overload
    def image_cget(self, index: _TextIndex, option: str) -> Any:
        ...
    
    @overload
    def image_configure(self, index: _TextIndex, cnf: str) -> tuple[str, str, str, str, str | int]:
        ...
    
    @overload
    def image_configure(self, index: _TextIndex, cnf: dict[str, Any] | None = ..., *, align: Literal["baseline", "bottom", "center", "top"] = ..., image: _ImageSpec = ..., name: str = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ...) -> dict[str, tuple[str, str, str, str, str | int]] | None:
        ...
    
    def image_create(self, index: _TextIndex, cnf: dict[str, Any] | None = ..., *, align: Literal["baseline", "bottom", "center", "top"] = ..., image: _ImageSpec = ..., name: str = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ...) -> str:
        ...
    
    def image_names(self) -> tuple[str, ...]:
        ...
    
    def index(self, index: _TextIndex) -> str:
        ...
    
    def insert(self, index: _TextIndex, chars: str, *args: str | list[str] | tuple[str, ...]) -> None:
        ...
    
    @overload
    def mark_gravity(self, markName: str, direction: None = ...) -> Literal["left", "right"]:
        ...
    
    @overload
    def mark_gravity(self, markName: str, direction: Literal["left", "right"]) -> None:
        ...
    
    def mark_names(self) -> tuple[str, ...]:
        ...
    
    def mark_set(self, markName: str, index: _TextIndex) -> None:
        ...
    
    def mark_unset(self, *markNames: str) -> None:
        ...
    
    def mark_next(self, index: _TextIndex) -> str | None:
        ...
    
    def mark_previous(self, index: _TextIndex) -> str | None:
        ...
    
    def peer_create(self, newPathName: str | Text, cnf: dict[str, Any] = ..., **kw) -> None:
        ...
    
    def peer_names(self) -> tuple[_tkinter.Tcl_Obj, ...]:
        ...
    
    def replace(self, index1: _TextIndex, index2: _TextIndex, chars: str, *args: str | list[str] | tuple[str, ...]) -> None:
        ...
    
    def scan_mark(self, x: int, y: int) -> None:
        ...
    
    def scan_dragto(self, x: int, y: int) -> None:
        ...
    
    def search(self, pattern: str, index: _TextIndex, stopindex: _TextIndex | None = ..., forwards: bool | None = ..., backwards: bool | None = ..., exact: bool | None = ..., regexp: bool | None = ..., nocase: bool | None = ..., count: Variable | None = ..., elide: bool | None = ...) -> str:
        ...
    
    def see(self, index: _TextIndex) -> None:
        ...
    
    def tag_add(self, tagName: str, index1: _TextIndex, *args: _TextIndex) -> None:
        ...
    
    @overload
    def tag_bind(self, tagName: str, sequence: str | None, func: Callable[[Event[Text]], object] | None, add: Literal["", "+"] | bool | None = ...) -> str:
        ...
    
    @overload
    def tag_bind(self, tagName: str, sequence: str | None, func: str, add: Literal["", "+"] | bool | None = ...) -> None:
        ...
    
    def tag_unbind(self, tagName: str, sequence: str, funcid: str | None = ...) -> None:
        ...
    
    def tag_cget(self, tagName: str, option: str):
        ...
    
    @overload
    def tag_configure(self, tagName: str, cnf: dict[str, Any] | None = ..., *, background: str = ..., bgstipple: str = ..., borderwidth: _ScreenUnits = ..., border: _ScreenUnits = ..., elide: bool = ..., fgstipple: str = ..., font: _FontDescription = ..., foreground: str = ..., justify: Literal["left", "right", "center"] = ..., lmargin1: _ScreenUnits = ..., lmargin2: _ScreenUnits = ..., lmargincolor: str = ..., offset: _ScreenUnits = ..., overstrike: bool = ..., overstrikefg: str = ..., relief: _Relief = ..., rmargin: _ScreenUnits = ..., rmargincolor: str = ..., selectbackground: str = ..., selectforeground: str = ..., spacing1: _ScreenUnits = ..., spacing2: _ScreenUnits = ..., spacing3: _ScreenUnits = ..., tabs: Any = ..., tabstyle: Literal["tabular", "wordprocessor"] = ..., underline: bool = ..., underlinefg: str = ..., wrap: Literal["none", "char", "word"] = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def tag_configure(self, tagName: str, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    tag_config = ...
    def tag_delete(self, __first_tag_name: str, *tagNames: str) -> None:
        ...
    
    def tag_lower(self, tagName: str, belowThis: str | None = ...) -> None:
        ...
    
    def tag_names(self, index: _TextIndex | None = ...) -> tuple[str, ...]:
        ...
    
    def tag_nextrange(self, tagName: str, index1: _TextIndex, index2: _TextIndex | None = ...) -> tuple[str, str] | tuple[()]:
        ...
    
    def tag_prevrange(self, tagName: str, index1: _TextIndex, index2: _TextIndex | None = ...) -> tuple[str, str] | tuple[()]:
        ...
    
    def tag_raise(self, tagName: str, aboveThis: str | None = ...) -> None:
        ...
    
    def tag_ranges(self, tagName: str) -> tuple[_tkinter.Tcl_Obj, ...]:
        ...
    
    def tag_remove(self, tagName: str, index1: _TextIndex, index2: _TextIndex | None = ...) -> None:
        ...
    
    @overload
    def window_cget(self, index: _TextIndex, option: Literal["padx", "pady"]) -> int:
        ...
    
    @overload
    def window_cget(self, index: _TextIndex, option: Literal["stretch"]) -> bool:
        ...
    
    @overload
    def window_cget(self, index: _TextIndex, option: Literal["align"]) -> Literal["baseline", "bottom", "center", "top"]:
        ...
    
    @overload
    def window_cget(self, index: _TextIndex, option: Literal["create", "window"]) -> str:
        ...
    
    @overload
    def window_cget(self, index: _TextIndex, option: str) -> Any:
        ...
    
    @overload
    def window_configure(self, index: _TextIndex, cnf: str) -> tuple[str, str, str, str, str | int]:
        ...
    
    @overload
    def window_configure(self, index: _TextIndex, cnf: dict[str, Any] | None = ..., *, align: Literal["baseline", "bottom", "center", "top"] = ..., create: str = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., stretch: bool | Literal[0, 1] = ..., window: Misc | str = ...) -> dict[str, tuple[str, str, str, str, str | int]] | None:
        ...
    
    window_config = ...
    def window_create(self, index: _TextIndex, cnf: dict[str, Any] | None = ..., *, align: Literal["baseline", "bottom", "center", "top"] = ..., create: str = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., stretch: bool | Literal[0, 1] = ..., window: Misc | str = ...) -> None:
        ...
    
    def window_names(self) -> tuple[str, ...]:
        ...
    
    def yview_pickplace(self, *what):
        ...
    


class _setit:
    def __init__(self, var, value, callback: Incomplete | None = ...) -> None:
        ...
    
    def __call__(self, *args) -> None:
        ...
    


class OptionMenu(Menubutton):
    widgetName: Incomplete
    menuname: Incomplete
    def __init__(self, master: Misc | None, variable: StringVar, value: str, *values: str, command: Callable[[StringVar], object] | None = ...) -> None:
        ...
    


@type_check_only
class _Image:
    ...


@type_check_only
class _BitmapImageLike(_Image):
    ...


@type_check_only
class _PhotoImageLike(_Image):
    ...


class Image(_Image):
    name: Incomplete
    tk: _tkinter.TkappType
    def __init__(self, imgtype, name: Incomplete | None = ..., cnf=..., master: Misc | _tkinter.TkappType | None = ..., **kw) -> None:
        ...
    
    def __del__(self) -> None:
        ...
    
    def __setitem__(self, key, value) -> None:
        ...
    
    def __getitem__(self, key):
        ...
    
    configure: Incomplete
    config: Incomplete
    def height(self) -> int:
        ...
    
    def type(self):
        ...
    
    def width(self) -> int:
        ...
    


class PhotoImage(Image, _PhotoImageLike):
    def __init__(self, name: str | None = ..., cnf: dict[str, Any] = ..., master: Misc | _tkinter.TkappType | None = ..., *, data: str | bytes = ..., format: str = ..., file: StrOrBytesPath = ..., gamma: float = ..., height: int = ..., palette: int | str = ..., width: int = ...) -> None:
        ...
    
    def configure(self, *, data: str | bytes = ..., format: str = ..., file: StrOrBytesPath = ..., gamma: float = ..., height: int = ..., palette: int | str = ..., width: int = ...) -> None:
        ...
    
    config = configure
    def blank(self) -> None:
        ...
    
    def cget(self, option: str) -> str:
        ...
    
    def __getitem__(self, key: str) -> str:
        ...
    
    def copy(self) -> PhotoImage:
        ...
    
    def zoom(self, x: int, y: int | Literal[""] = ...) -> PhotoImage:
        ...
    
    def subsample(self, x: int, y: int | Literal[""] = ...) -> PhotoImage:
        ...
    
    def get(self, x: int, y: int) -> tuple[int, int, int]:
        ...
    
    def put(self, data: (str | list[str] | list[list[str]] | list[tuple[str, ...]] | tuple[str, ...] | tuple[list[str], ...] | tuple[tuple[str, ...], ...]), to: tuple[int, int] | None = ...) -> None:
        ...
    
    def write(self, filename: StrOrBytesPath, format: str | None = ..., from_coords: tuple[int, int] | None = ...) -> None:
        ...
    
    def transparency_get(self, x: int, y: int) -> bool:
        ...
    
    def transparency_set(self, x: int, y: int, boolean: bool) -> None:
        ...
    


class BitmapImage(Image, _BitmapImageLike):
    def __init__(self, name: Incomplete | None = ..., cnf: dict[str, Any] = ..., master: Misc | _tkinter.TkappType | None = ..., *, background: str = ..., data: str | bytes = ..., file: StrOrBytesPath = ..., foreground: str = ..., maskdata: str = ..., maskfile: StrOrBytesPath = ...) -> None:
        ...
    


def image_names() -> tuple[str, ...]:
    ...

def image_types() -> tuple[str, ...]:
    ...

class Spinbox(Widget, XView):
    def __init__(self, master: Misc | None = ..., cnf: dict[str, Any] | None = ..., *, activebackground: str = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., buttonbackground: str = ..., buttoncursor: _Cursor = ..., buttondownrelief: _Relief = ..., buttonuprelief: _Relief = ..., command: Callable[[], object] | str | list[str] | tuple[str, ...] = ..., cursor: _Cursor = ..., disabledbackground: str = ..., disabledforeground: str = ..., exportselection: bool = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., format: str = ..., from_: float = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., increment: float = ..., insertbackground: str = ..., insertborderwidth: _ScreenUnits = ..., insertofftime: int = ..., insertontime: int = ..., insertwidth: _ScreenUnits = ..., invalidcommand: _EntryValidateCommand = ..., invcmd: _EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., name: str = ..., readonlybackground: str = ..., relief: _Relief = ..., repeatdelay: int = ..., repeatinterval: int = ..., selectbackground: str = ..., selectborderwidth: _ScreenUnits = ..., selectforeground: str = ..., state: Literal["normal", "disabled", "readonly"] = ..., takefocus: _TakeFocusValue = ..., textvariable: Variable = ..., to: float = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: _EntryValidateCommand = ..., vcmd: _EntryValidateCommand = ..., values: list[str] | tuple[str, ...] = ..., width: int = ..., wrap: bool = ..., xscrollcommand: _XYScrollCommand = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, activebackground: str = ..., background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., buttonbackground: str = ..., buttoncursor: _Cursor = ..., buttondownrelief: _Relief = ..., buttonuprelief: _Relief = ..., command: Callable[[], object] | str | list[str] | tuple[str, ...] = ..., cursor: _Cursor = ..., disabledbackground: str = ..., disabledforeground: str = ..., exportselection: bool = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., format: str = ..., from_: float = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., increment: float = ..., insertbackground: str = ..., insertborderwidth: _ScreenUnits = ..., insertofftime: int = ..., insertontime: int = ..., insertwidth: _ScreenUnits = ..., invalidcommand: _EntryValidateCommand = ..., invcmd: _EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., readonlybackground: str = ..., relief: _Relief = ..., repeatdelay: int = ..., repeatinterval: int = ..., selectbackground: str = ..., selectborderwidth: _ScreenUnits = ..., selectforeground: str = ..., state: Literal["normal", "disabled", "readonly"] = ..., takefocus: _TakeFocusValue = ..., textvariable: Variable = ..., to: float = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: _EntryValidateCommand = ..., vcmd: _EntryValidateCommand = ..., values: list[str] | tuple[str, ...] = ..., width: int = ..., wrap: bool = ..., xscrollcommand: _XYScrollCommand = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def bbox(self, index) -> tuple[int, int, int, int] | None:
        ...
    
    def delete(self, first, last: Incomplete | None = ...) -> Literal[""]:
        ...
    
    def get(self) -> str:
        ...
    
    def icursor(self, index):
        ...
    
    def identify(self, x: int, y: int) -> Literal["", "buttondown", "buttonup", "entry"]:
        ...
    
    def index(self, index: str | int) -> int:
        ...
    
    def insert(self, index: str | int, s: str) -> Literal[""]:
        ...
    
    def invoke(self, element: Literal["none", "buttonup", "buttondown"]) -> Literal[""]:
        ...
    
    def scan(self, *args):
        ...
    
    def scan_mark(self, x):
        ...
    
    def scan_dragto(self, x):
        ...
    
    def selection(self, *args) -> tuple[int, ...]:
        ...
    
    def selection_adjust(self, index):
        ...
    
    def selection_clear(self):
        ...
    
    def selection_element(self, element: Incomplete | None = ...):
        ...
    
    def selection_from(self, index: int) -> None:
        ...
    
    def selection_present(self) -> None:
        ...
    
    def selection_range(self, start: int, end: int) -> None:
        ...
    
    def selection_to(self, index: int) -> None:
        ...
    


class LabelFrame(Widget):
    def __init__(self, master: Misc | None = ..., cnf: dict[str, Any] | None = ..., *, background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., class_: str = ..., colormap: Literal["new", ""] | Misc = ..., container: bool = ..., cursor: _Cursor = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., height: _ScreenUnits = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., labelanchor: Literal["nw", "n", "ne", "en", "e", "es", "se", "s", "sw", "ws", "w", "wn"] = ..., labelwidget: Misc = ..., name: str = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., takefocus: _TakeFocusValue = ..., text: float | str = ..., visual: str | tuple[str, int] = ..., width: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., fg: str = ..., font: _FontDescription = ..., foreground: str = ..., height: _ScreenUnits = ..., highlightbackground: str = ..., highlightcolor: str = ..., highlightthickness: _ScreenUnits = ..., labelanchor: Literal["nw", "n", "ne", "en", "e", "es", "se", "s", "sw", "ws", "w", "wn"] = ..., labelwidget: Misc = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., takefocus: _TakeFocusValue = ..., text: float | str = ..., width: _ScreenUnits = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


class PanedWindow(Widget):
    def __init__(self, master: Misc | None = ..., cnf: dict[str, Any] | None = ..., *, background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., handlepad: _ScreenUnits = ..., handlesize: _ScreenUnits = ..., height: _ScreenUnits = ..., name: str = ..., opaqueresize: bool = ..., orient: Literal["horizontal", "vertical"] = ..., proxybackground: str = ..., proxyborderwidth: _ScreenUnits = ..., proxyrelief: _Relief = ..., relief: _Relief = ..., sashcursor: _Cursor = ..., sashpad: _ScreenUnits = ..., sashrelief: _Relief = ..., sashwidth: _ScreenUnits = ..., showhandle: bool = ..., width: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, background: str = ..., bd: _ScreenUnits = ..., bg: str = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., handlepad: _ScreenUnits = ..., handlesize: _ScreenUnits = ..., height: _ScreenUnits = ..., opaqueresize: bool = ..., orient: Literal["horizontal", "vertical"] = ..., proxybackground: str = ..., proxyborderwidth: _ScreenUnits = ..., proxyrelief: _Relief = ..., relief: _Relief = ..., sashcursor: _Cursor = ..., sashpad: _ScreenUnits = ..., sashrelief: _Relief = ..., sashwidth: _ScreenUnits = ..., showhandle: bool = ..., width: _ScreenUnits = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def add(self, child: Widget, **kw) -> None:
        ...
    
    def remove(self, child) -> None:
        ...
    
    forget: Incomplete
    def identify(self, x: int, y: int):
        ...
    
    def proxy(self, *args):
        ...
    
    def proxy_coord(self):
        ...
    
    def proxy_forget(self):
        ...
    
    def proxy_place(self, x, y):
        ...
    
    def sash(self, *args):
        ...
    
    def sash_coord(self, index):
        ...
    
    def sash_mark(self, index):
        ...
    
    def sash_place(self, index, x, y):
        ...
    
    def panecget(self, child, option):
        ...
    
    def paneconfigure(self, tagOrId, cnf: Incomplete | None = ..., **kw):
        ...
    
    paneconfig: Incomplete
    def panes(self):
        ...
    


