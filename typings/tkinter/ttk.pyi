"""
This type stub file was generated by pyright.
"""

import _tkinter
import tkinter
from _typeshed import Incomplete
from collections.abc import Callable
from tkinter.font import _FontDescription
from typing import Any, Literal, TypedDict, overload
from typing_extensions import TypeAlias

__all__ = ["Button", "Checkbutton", "Combobox", "Entry", "Frame", "Label", "Labelframe", "LabelFrame", "Menubutton", "Notebook", "Panedwindow", "PanedWindow", "Progressbar", "Radiobutton", "Scale", "Scrollbar", "Separator", "Sizegrip", "Style", "Treeview", "LabeledScale", "OptionMenu", "tclobjs_to_py", "setup_master", "Spinbox"]
def tclobjs_to_py(adict: dict[Any, Any]) -> dict[Any, Any]:
    ...

def setup_master(master: Incomplete | None = ...):
    ...

_Padding: TypeAlias = ...
_TtkCompound: TypeAlias = ...
class Style:
    master: Incomplete
    tk: _tkinter.TkappType
    def __init__(self, master: tkinter.Misc | None = ...) -> None:
        ...
    
    def configure(self, style, query_opt: Incomplete | None = ..., **kw):
        ...
    
    def map(self, style, query_opt: Incomplete | None = ..., **kw):
        ...
    
    def lookup(self, style, option, state: Incomplete | None = ..., default: Incomplete | None = ...):
        ...
    
    def layout(self, style, layoutspec: Incomplete | None = ...):
        ...
    
    def element_create(self, elementname, etype, *args, **kw) -> None:
        ...
    
    def element_names(self):
        ...
    
    def element_options(self, elementname):
        ...
    
    def theme_create(self, themename, parent: Incomplete | None = ..., settings: Incomplete | None = ...) -> None:
        ...
    
    def theme_settings(self, themename, settings) -> None:
        ...
    
    def theme_names(self) -> tuple[str, ...]:
        ...
    
    @overload
    def theme_use(self, themename: str) -> None:
        ...
    
    @overload
    def theme_use(self, themename: None = ...) -> str:
        ...
    


class Widget(tkinter.Widget):
    def __init__(self, master: tkinter.Misc | None, widgetname, kw: Incomplete | None = ...) -> None:
        ...
    
    def identify(self, x: int, y: int) -> str:
        ...
    
    def instate(self, statespec, callback: Incomplete | None = ..., *args, **kw):
        ...
    
    def state(self, statespec: Incomplete | None = ...):
        ...
    


class Button(Widget):
    def __init__(self, master: tkinter.Misc | None = ..., *, class_: str = ..., command: tkinter._ButtonCommand = ..., compound: _TtkCompound = ..., cursor: tkinter._Cursor = ..., default: Literal["normal", "active", "disabled"] = ..., image: tkinter._ImageSpec = ..., name: str = ..., padding=..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: float | str = ..., textvariable: tkinter.Variable = ..., underline: int = ..., width: int | Literal[""] = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, command: tkinter._ButtonCommand = ..., compound: _TtkCompound = ..., cursor: tkinter._Cursor = ..., default: Literal["normal", "active", "disabled"] = ..., image: tkinter._ImageSpec = ..., padding=..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: float | str = ..., textvariable: tkinter.Variable = ..., underline: int = ..., width: int | Literal[""] = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def invoke(self) -> Any:
        ...
    


class Checkbutton(Widget):
    def __init__(self, master: tkinter.Misc | None = ..., *, class_: str = ..., command: tkinter._ButtonCommand = ..., compound: _TtkCompound = ..., cursor: tkinter._Cursor = ..., image: tkinter._ImageSpec = ..., name: str = ..., offvalue: Any = ..., onvalue: Any = ..., padding=..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: float | str = ..., textvariable: tkinter.Variable = ..., underline: int = ..., variable: tkinter.Variable = ..., width: int | Literal[""] = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, command: tkinter._ButtonCommand = ..., compound: _TtkCompound = ..., cursor: tkinter._Cursor = ..., image: tkinter._ImageSpec = ..., offvalue: Any = ..., onvalue: Any = ..., padding=..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: float | str = ..., textvariable: tkinter.Variable = ..., underline: int = ..., variable: tkinter.Variable = ..., width: int | Literal[""] = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def invoke(self) -> Any:
        ...
    


class Entry(Widget, tkinter.Entry):
    def __init__(self, master: tkinter.Misc | None = ..., widget: str | None = ..., *, background: str = ..., class_: str = ..., cursor: tkinter._Cursor = ..., exportselection: bool = ..., font: _FontDescription = ..., foreground: str = ..., invalidcommand: tkinter._EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., name: str = ..., show: str = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., textvariable: tkinter.Variable = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: tkinter._EntryValidateCommand = ..., width: int = ..., xscrollcommand: tkinter._XYScrollCommand = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, background: str = ..., cursor: tkinter._Cursor = ..., exportselection: bool = ..., font: _FontDescription = ..., foreground: str = ..., invalidcommand: tkinter._EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., show: str = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., textvariable: tkinter.Variable = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: tkinter._EntryValidateCommand = ..., width: int = ..., xscrollcommand: tkinter._XYScrollCommand = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    @overload
    def config(self, cnf: dict[str, Any] | None = ..., *, background: str = ..., cursor: tkinter._Cursor = ..., exportselection: bool = ..., font: _FontDescription = ..., foreground: str = ..., invalidcommand: tkinter._EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., show: str = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., textvariable: tkinter.Variable = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: tkinter._EntryValidateCommand = ..., width: int = ..., xscrollcommand: tkinter._XYScrollCommand = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def config(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    def bbox(self, index) -> tuple[int, int, int, int]:
        ...
    
    def identify(self, x: int, y: int) -> str:
        ...
    
    def validate(self):
        ...
    


class Combobox(Entry):
    def __init__(self, master: tkinter.Misc | None = ..., *, background: str = ..., class_: str = ..., cursor: tkinter._Cursor = ..., exportselection: bool = ..., font: _FontDescription = ..., foreground: str = ..., height: int = ..., invalidcommand: tkinter._EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., name: str = ..., postcommand: Callable[[], object] | str = ..., show=..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., textvariable: tkinter.Variable = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: tkinter._EntryValidateCommand = ..., values: list[str] | tuple[str, ...] = ..., width: int = ..., xscrollcommand: tkinter._XYScrollCommand = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, background: str = ..., cursor: tkinter._Cursor = ..., exportselection: bool = ..., font: _FontDescription = ..., foreground: str = ..., height: int = ..., invalidcommand: tkinter._EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., postcommand: Callable[[], object] | str = ..., show=..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., textvariable: tkinter.Variable = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: tkinter._EntryValidateCommand = ..., values: list[str] | tuple[str, ...] = ..., width: int = ..., xscrollcommand: tkinter._XYScrollCommand = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    @overload
    def config(self, cnf: dict[str, Any] | None = ..., *, background: str = ..., cursor: tkinter._Cursor = ..., exportselection: bool = ..., font: _FontDescription = ..., foreground: str = ..., height: int = ..., invalidcommand: tkinter._EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., postcommand: Callable[[], object] | str = ..., show=..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., textvariable: tkinter.Variable = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: tkinter._EntryValidateCommand = ..., values: list[str] | tuple[str, ...] = ..., width: int = ..., xscrollcommand: tkinter._XYScrollCommand = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def config(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    def current(self, newindex: int | None = ...) -> int:
        ...
    
    def set(self, value: Any) -> None:
        ...
    


class Frame(Widget):
    def __init__(self, master: tkinter.Misc | None = ..., *, border: tkinter._ScreenUnits = ..., borderwidth: tkinter._ScreenUnits = ..., class_: str = ..., cursor: tkinter._Cursor = ..., height: tkinter._ScreenUnits = ..., name: str = ..., padding: _Padding = ..., relief: tkinter._Relief = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., width: tkinter._ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, border: tkinter._ScreenUnits = ..., borderwidth: tkinter._ScreenUnits = ..., cursor: tkinter._Cursor = ..., height: tkinter._ScreenUnits = ..., padding: _Padding = ..., relief: tkinter._Relief = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., width: tkinter._ScreenUnits = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


class Label(Widget):
    def __init__(self, master: tkinter.Misc | None = ..., *, anchor: tkinter._Anchor = ..., background: str = ..., border: tkinter._ScreenUnits = ..., borderwidth: tkinter._ScreenUnits = ..., class_: str = ..., compound: _TtkCompound = ..., cursor: tkinter._Cursor = ..., font: _FontDescription = ..., foreground: str = ..., image: tkinter._ImageSpec = ..., justify: Literal["left", "center", "right"] = ..., name: str = ..., padding: _Padding = ..., relief: tkinter._Relief = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: float | str = ..., textvariable: tkinter.Variable = ..., underline: int = ..., width: int | Literal[""] = ..., wraplength: tkinter._ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, anchor: tkinter._Anchor = ..., background: str = ..., border: tkinter._ScreenUnits = ..., borderwidth: tkinter._ScreenUnits = ..., compound: _TtkCompound = ..., cursor: tkinter._Cursor = ..., font: _FontDescription = ..., foreground: str = ..., image: tkinter._ImageSpec = ..., justify: Literal["left", "center", "right"] = ..., padding: _Padding = ..., relief: tkinter._Relief = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: float | str = ..., textvariable: tkinter.Variable = ..., underline: int = ..., width: int | Literal[""] = ..., wraplength: tkinter._ScreenUnits = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


class Labelframe(Widget):
    def __init__(self, master: tkinter.Misc | None = ..., *, border: tkinter._ScreenUnits = ..., borderwidth: tkinter._ScreenUnits = ..., class_: str = ..., cursor: tkinter._Cursor = ..., height: tkinter._ScreenUnits = ..., labelanchor: Literal["nw", "n", "ne", "en", "e", "es", "se", "s", "sw", "ws", "w", "wn"] = ..., labelwidget: tkinter.Misc = ..., name: str = ..., padding: _Padding = ..., relief: tkinter._Relief = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: float | str = ..., underline: int = ..., width: tkinter._ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, border: tkinter._ScreenUnits = ..., borderwidth: tkinter._ScreenUnits = ..., cursor: tkinter._Cursor = ..., height: tkinter._ScreenUnits = ..., labelanchor: Literal["nw", "n", "ne", "en", "e", "es", "se", "s", "sw", "ws", "w", "wn"] = ..., labelwidget: tkinter.Misc = ..., padding: _Padding = ..., relief: tkinter._Relief = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: float | str = ..., underline: int = ..., width: tkinter._ScreenUnits = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


LabelFrame = Labelframe
class Menubutton(Widget):
    def __init__(self, master: tkinter.Misc | None = ..., *, class_: str = ..., compound: _TtkCompound = ..., cursor: tkinter._Cursor = ..., direction: Literal["above", "below", "left", "right", "flush"] = ..., image: tkinter._ImageSpec = ..., menu: tkinter.Menu = ..., name: str = ..., padding=..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: float | str = ..., textvariable: tkinter.Variable = ..., underline: int = ..., width: int | Literal[""] = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, compound: _TtkCompound = ..., cursor: tkinter._Cursor = ..., direction: Literal["above", "below", "left", "right", "flush"] = ..., image: tkinter._ImageSpec = ..., menu: tkinter.Menu = ..., padding=..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: float | str = ..., textvariable: tkinter.Variable = ..., underline: int = ..., width: int | Literal[""] = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


class Notebook(Widget):
    def __init__(self, master: tkinter.Misc | None = ..., *, class_: str = ..., cursor: tkinter._Cursor = ..., height: int = ..., name: str = ..., padding: _Padding = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., width: int = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, cursor: tkinter._Cursor = ..., height: int = ..., padding: _Padding = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., width: int = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def add(self, child: tkinter.Widget, *, state: Literal["normal", "disabled", "hidden"] = ..., sticky: str = ..., padding: _Padding = ..., text: str = ..., image=..., compound: tkinter._Compound = ..., underline: int = ...) -> None:
        ...
    
    def forget(self, tab_id) -> None:
        ...
    
    def hide(self, tab_id) -> None:
        ...
    
    def identify(self, x: int, y: int) -> str:
        ...
    
    def index(self, tab_id):
        ...
    
    def insert(self, pos, child, **kw) -> None:
        ...
    
    def select(self, tab_id: Incomplete | None = ...):
        ...
    
    def tab(self, tab_id, option: Incomplete | None = ..., **kw):
        ...
    
    def tabs(self):
        ...
    
    def enable_traversal(self) -> None:
        ...
    


class Panedwindow(Widget, tkinter.PanedWindow):
    def __init__(self, master: tkinter.Misc | None = ..., *, class_: str = ..., cursor: tkinter._Cursor = ..., height: int = ..., name: str = ..., orient: Literal["vertical", "horizontal"] = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., width: int = ...) -> None:
        ...
    
    def add(self, child: tkinter.Widget, *, weight: int = ..., **kw) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, cursor: tkinter._Cursor = ..., height: int = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., width: int = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    @overload
    def config(self, cnf: dict[str, Any] | None = ..., *, cursor: tkinter._Cursor = ..., height: int = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., width: int = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def config(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    forget: Incomplete
    def insert(self, pos, child, **kw) -> None:
        ...
    
    def pane(self, pane, option: Incomplete | None = ..., **kw):
        ...
    
    def sashpos(self, index, newpos: Incomplete | None = ...):
        ...
    


PanedWindow = Panedwindow
class Progressbar(Widget):
    def __init__(self, master: tkinter.Misc | None = ..., *, class_: str = ..., cursor: tkinter._Cursor = ..., length: tkinter._ScreenUnits = ..., maximum: float = ..., mode: Literal["determinate", "indeterminate"] = ..., name: str = ..., orient: Literal["horizontal", "vertical"] = ..., phase: int = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., value: float = ..., variable: tkinter.IntVar | tkinter.DoubleVar = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, cursor: tkinter._Cursor = ..., length: tkinter._ScreenUnits = ..., maximum: float = ..., mode: Literal["determinate", "indeterminate"] = ..., orient: Literal["horizontal", "vertical"] = ..., phase: int = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., value: float = ..., variable: tkinter.IntVar | tkinter.DoubleVar = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def start(self, interval: Literal["idle"] | int | None = ...) -> None:
        ...
    
    def step(self, amount: float | None = ...) -> None:
        ...
    
    def stop(self) -> None:
        ...
    


class Radiobutton(Widget):
    def __init__(self, master: tkinter.Misc | None = ..., *, class_: str = ..., command: tkinter._ButtonCommand = ..., compound: _TtkCompound = ..., cursor: tkinter._Cursor = ..., image: tkinter._ImageSpec = ..., name: str = ..., padding=..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: float | str = ..., textvariable: tkinter.Variable = ..., underline: int = ..., value: Any = ..., variable: tkinter.Variable | Literal[""] = ..., width: int | Literal[""] = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, command: tkinter._ButtonCommand = ..., compound: _TtkCompound = ..., cursor: tkinter._Cursor = ..., image: tkinter._ImageSpec = ..., padding=..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: float | str = ..., textvariable: tkinter.Variable = ..., underline: int = ..., value: Any = ..., variable: tkinter.Variable | Literal[""] = ..., width: int | Literal[""] = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def invoke(self) -> Any:
        ...
    


class Scale(Widget, tkinter.Scale):
    def __init__(self, master: tkinter.Misc | None = ..., *, class_: str = ..., command: str | Callable[[str], object] = ..., cursor: tkinter._Cursor = ..., from_: float = ..., length: tkinter._ScreenUnits = ..., name: str = ..., orient: Literal["horizontal", "vertical"] = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., to: float = ..., value: float = ..., variable: tkinter.IntVar | tkinter.DoubleVar = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, command: str | Callable[[str], object] = ..., cursor: tkinter._Cursor = ..., from_: float = ..., length: tkinter._ScreenUnits = ..., orient: Literal["horizontal", "vertical"] = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., to: float = ..., value: float = ..., variable: tkinter.IntVar | tkinter.DoubleVar = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    @overload
    def config(self, cnf: dict[str, Any] | None = ..., *, command: str | Callable[[str], object] = ..., cursor: tkinter._Cursor = ..., from_: float = ..., length: tkinter._ScreenUnits = ..., orient: Literal["horizontal", "vertical"] = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., to: float = ..., value: float = ..., variable: tkinter.IntVar | tkinter.DoubleVar = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def config(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    def get(self, x: int | None = ..., y: int | None = ...) -> float:
        ...
    


class Scrollbar(Widget, tkinter.Scrollbar):
    def __init__(self, master: tkinter.Misc | None = ..., *, class_: str = ..., command: Callable[..., tuple[float, float] | None] | str = ..., cursor: tkinter._Cursor = ..., name: str = ..., orient: Literal["horizontal", "vertical"] = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, command: Callable[..., tuple[float, float] | None] | str = ..., cursor: tkinter._Cursor = ..., orient: Literal["horizontal", "vertical"] = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    @overload
    def config(self, cnf: dict[str, Any] | None = ..., *, command: Callable[..., tuple[float, float] | None] | str = ..., cursor: tkinter._Cursor = ..., orient: Literal["horizontal", "vertical"] = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def config(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    


class Separator(Widget):
    def __init__(self, master: tkinter.Misc | None = ..., *, class_: str = ..., cursor: tkinter._Cursor = ..., name: str = ..., orient: Literal["horizontal", "vertical"] = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, cursor: tkinter._Cursor = ..., orient: Literal["horizontal", "vertical"] = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


class Sizegrip(Widget):
    def __init__(self, master: tkinter.Misc | None = ..., *, class_: str = ..., cursor: tkinter._Cursor = ..., name: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, cursor: tkinter._Cursor = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


class Spinbox(Entry):
    def __init__(self, master: tkinter.Misc | None = ..., *, background: str = ..., class_: str = ..., command: Callable[[], object] | str | list[str] | tuple[str, ...] = ..., cursor: tkinter._Cursor = ..., exportselection: bool = ..., font: _FontDescription = ..., foreground: str = ..., format: str = ..., from_: float = ..., increment: float = ..., invalidcommand: tkinter._EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., name: str = ..., show=..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., textvariable: tkinter.Variable = ..., to: float = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: tkinter._EntryValidateCommand = ..., values: list[str] | tuple[str, ...] = ..., width: int = ..., wrap: bool = ..., xscrollcommand: tkinter._XYScrollCommand = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, background: str = ..., command: Callable[[], object] | str | list[str] | tuple[str, ...] = ..., cursor: tkinter._Cursor = ..., exportselection: bool = ..., font: _FontDescription = ..., foreground: str = ..., format: str = ..., from_: float = ..., increment: float = ..., invalidcommand: tkinter._EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., show=..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., textvariable: tkinter.Variable = ..., to: float = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: tkinter._EntryValidateCommand = ..., values: list[str] | tuple[str, ...] = ..., width: int = ..., wrap: bool = ..., xscrollcommand: tkinter._XYScrollCommand = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def set(self, value: Any) -> None:
        ...
    


class _TreeviewItemDict(TypedDict):
    text: str
    image: list[str] | Literal[""]
    values: list[Any] | Literal[""]
    open: bool
    tags: list[str] | Literal[""]
    ...


class _TreeviewTagDict(TypedDict):
    foreground: str
    background: str
    font: _FontDescription
    image: str
    ...


class _TreeviewHeaderDict(TypedDict):
    text: str
    image: list[str] | Literal[""]
    anchor: tkinter._Anchor
    command: str
    state: str
    ...


class _TreeviewColumnDict(TypedDict):
    width: int
    minwidth: int
    stretch: bool
    anchor: tkinter._Anchor
    id: str
    ...


class Treeview(Widget, tkinter.XView, tkinter.YView):
    def __init__(self, master: tkinter.Misc | None = ..., *, class_: str = ..., columns: str | list[str] | list[int] | list[str | int] | tuple[str | int, ...] = ..., cursor: tkinter._Cursor = ..., displaycolumns: str | int | list[str] | tuple[str, ...] | list[int] | tuple[int, ...] = ..., height: int = ..., name: str = ..., padding: _Padding = ..., selectmode: Literal["extended", "browse", "none"] = ..., show: Literal["tree", "headings", "tree headings", ""] | list[str] | tuple[str, ...] = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., xscrollcommand: tkinter._XYScrollCommand = ..., yscrollcommand: tkinter._XYScrollCommand = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: dict[str, Any] | None = ..., *, columns: str | list[str] | list[int] | list[str | int] | tuple[str | int, ...] = ..., cursor: tkinter._Cursor = ..., displaycolumns: str | int | list[str] | tuple[str, ...] | list[int] | tuple[int, ...] = ..., height: int = ..., padding: _Padding = ..., selectmode: Literal["extended", "browse", "none"] = ..., show: Literal["tree", "headings", "tree headings", ""] | list[str] | tuple[str, ...] = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., xscrollcommand: tkinter._XYScrollCommand = ..., yscrollcommand: tkinter._XYScrollCommand = ...) -> dict[str, tuple[str, str, str, Any, Any]] | None:
        ...
    
    @overload
    def configure(self, cnf: str) -> tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def bbox(self, item: str | int, column: str | int | None = ...) -> tuple[int, int, int, int] | Literal[""]:
        ...
    
    def get_children(self, item: str | int | None = ...) -> tuple[str, ...]:
        ...
    
    def set_children(self, item: str | int, *newchildren: str | int) -> None:
        ...
    
    @overload
    def column(self, column: str | int, option: Literal["width", "minwidth"]) -> int:
        ...
    
    @overload
    def column(self, column: str | int, option: Literal["stretch"]) -> bool:
        ...
    
    @overload
    def column(self, column: str | int, option: Literal["anchor"]) -> _tkinter.Tcl_Obj:
        ...
    
    @overload
    def column(self, column: str | int, option: Literal["id"]) -> str:
        ...
    
    @overload
    def column(self, column: str | int, option: str) -> Any:
        ...
    
    @overload
    def column(self, column: str | int, option: None = ..., *, width: int = ..., minwidth: int = ..., stretch: bool = ..., anchor: tkinter._Anchor = ...) -> _TreeviewColumnDict | None:
        ...
    
    def delete(self, *items: str | int) -> None:
        ...
    
    def detach(self, *items: str | int) -> None:
        ...
    
    def exists(self, item: str | int) -> bool:
        ...
    
    @overload
    def focus(self, item: None = ...) -> str:
        ...
    
    @overload
    def focus(self, item: str | int) -> Literal[""]:
        ...
    
    @overload
    def heading(self, column: str | int, option: Literal["text"]) -> str:
        ...
    
    @overload
    def heading(self, column: str | int, option: Literal["image"]) -> tuple[str] | str:
        ...
    
    @overload
    def heading(self, column: str | int, option: Literal["anchor"]) -> _tkinter.Tcl_Obj:
        ...
    
    @overload
    def heading(self, column: str | int, option: Literal["command"]) -> str:
        ...
    
    @overload
    def heading(self, column: str | int, option: str) -> Any:
        ...
    
    @overload
    def heading(self, column: str | int, option: None = ...) -> _TreeviewHeaderDict:
        ...
    
    @overload
    def heading(self, column: str | int, option: None = ..., *, text: str = ..., image: tkinter._ImageSpec = ..., anchor: tkinter._Anchor = ..., command: str | Callable[[], object] = ...) -> None:
        ...
    
    def identify(self, component, x, y):
        ...
    
    def identify_row(self, y: int) -> str:
        ...
    
    def identify_column(self, x: int) -> str:
        ...
    
    def identify_region(self, x: int, y: int) -> Literal["heading", "separator", "tree", "cell", "nothing"]:
        ...
    
    def identify_element(self, x: int, y: int) -> str:
        ...
    
    def index(self, item: str | int) -> int:
        ...
    
    def insert(self, parent: str, index: int | Literal["end"], iid: str | int | None = ..., *, id: str | int = ..., text: str = ..., image: tkinter._ImageSpec = ..., values: list[Any] | tuple[Any, ...] = ..., open: bool = ..., tags: str | list[str] | tuple[str, ...] = ...) -> str:
        ...
    
    @overload
    def item(self, item: str | int, option: Literal["text"]) -> str:
        ...
    
    @overload
    def item(self, item: str | int, option: Literal["image"]) -> tuple[str] | Literal[""]:
        ...
    
    @overload
    def item(self, item: str | int, option: Literal["values"]) -> tuple[Any, ...] | Literal[""]:
        ...
    
    @overload
    def item(self, item: str | int, option: Literal["open"]) -> bool:
        ...
    
    @overload
    def item(self, item: str | int, option: Literal["tags"]) -> tuple[str, ...] | Literal[""]:
        ...
    
    @overload
    def item(self, item: str | int, option: str) -> Any:
        ...
    
    @overload
    def item(self, item: str | int, option: None = ...) -> _TreeviewItemDict:
        ...
    
    @overload
    def item(self, item: str | int, option: None = ..., *, text: str = ..., image: tkinter._ImageSpec = ..., values: list[Any] | tuple[Any, ...] | Literal[""] = ..., open: bool = ..., tags: str | list[str] | tuple[str, ...] = ...) -> None:
        ...
    
    def move(self, item: str | int, parent: str, index: int) -> None:
        ...
    
    reattach = ...
    def next(self, item: str | int) -> str:
        ...
    
    def parent(self, item: str | int) -> str:
        ...
    
    def prev(self, item: str | int) -> str:
        ...
    
    def see(self, item: str | int) -> None:
        ...
    
    def selection(self) -> tuple[str, ...]:
        ...
    
    @overload
    def selection_set(self, __items: list[str] | tuple[str, ...] | list[int] | tuple[int, ...]) -> None:
        ...
    
    @overload
    def selection_set(self, *items: str | int) -> None:
        ...
    
    @overload
    def selection_add(self, __items: list[str] | tuple[str, ...] | list[int] | tuple[int, ...]) -> None:
        ...
    
    @overload
    def selection_add(self, *items: str | int) -> None:
        ...
    
    @overload
    def selection_remove(self, __items: list[str] | tuple[str, ...] | list[int] | tuple[int, ...]) -> None:
        ...
    
    @overload
    def selection_remove(self, *items: str | int) -> None:
        ...
    
    @overload
    def selection_toggle(self, __items: list[str] | tuple[str, ...] | list[int] | tuple[int, ...]) -> None:
        ...
    
    @overload
    def selection_toggle(self, *items: str | int) -> None:
        ...
    
    @overload
    def set(self, item: str | int, column: None = ..., value: None = ...) -> dict[str, Any]:
        ...
    
    @overload
    def set(self, item: str | int, column: str | int, value: None = ...) -> Any:
        ...
    
    @overload
    def set(self, item: str | int, column: str | int, value: Any) -> Literal[""]:
        ...
    
    @overload
    def tag_bind(self, tagname: str, sequence: str | None = ..., callback: Callable[[tkinter.Event[Treeview]], object] | None = ...) -> str:
        ...
    
    @overload
    def tag_bind(self, tagname: str, sequence: str | None, callback: str) -> None:
        ...
    
    @overload
    def tag_bind(self, tagname: str, *, callback: str) -> None:
        ...
    
    @overload
    def tag_configure(self, tagname: str, option: Literal["foreground", "background"]) -> str:
        ...
    
    @overload
    def tag_configure(self, tagname: str, option: Literal["font"]) -> _FontDescription:
        ...
    
    @overload
    def tag_configure(self, tagname: str, option: Literal["image"]) -> str:
        ...
    
    @overload
    def tag_configure(self, tagname: str, option: None = ..., *, foreground: str = ..., background: str = ..., font: _FontDescription = ..., image: tkinter._ImageSpec = ...) -> _TreeviewTagDict | Any:
        ...
    
    @overload
    def tag_has(self, tagname: str, item: None = ...) -> tuple[str, ...]:
        ...
    
    @overload
    def tag_has(self, tagname: str, item: str | int) -> bool:
        ...
    


class LabeledScale(Frame):
    label: Label
    scale: Scale
    def __init__(self, master: tkinter.Misc | None = ..., variable: tkinter.IntVar | tkinter.DoubleVar | None = ..., from_: float = ..., to: float = ..., *, border: tkinter._ScreenUnits = ..., borderwidth: tkinter._ScreenUnits = ..., class_: str = ..., compound: Literal["top", "bottom"] = ..., cursor: tkinter._Cursor = ..., height: tkinter._ScreenUnits = ..., name: str = ..., padding: _Padding = ..., relief: tkinter._Relief = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., width: tkinter._ScreenUnits = ...) -> None:
        ...
    
    value: Any


class OptionMenu(Menubutton):
    def __init__(self, master: tkinter.Misc | None, variable: tkinter.StringVar, default: str | None = ..., *values: str, style: str = ..., direction: Literal["above", "below", "left", "right", "flush"] = ..., command: Callable[[tkinter.StringVar], object] | None = ...) -> None:
        ...
    
    def set_menu(self, default: str | None = ..., *values: str) -> None:
        ...
    


